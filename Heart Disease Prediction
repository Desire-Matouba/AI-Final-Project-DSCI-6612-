{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Diagnosing Heart Disease using ML models\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from pandas.plotting import scatter_matrix\n",
    "from sklearn import model_selection\n",
    "from sklearn.metrics import classification_report, accuracy_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>cp</th>\n",
       "      <th>trestbps</th>\n",
       "      <th>chol</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restecg</th>\n",
       "      <th>thalach</th>\n",
       "      <th>exang</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>slope</th>\n",
       "      <th>ca</th>\n",
       "      <th>thal</th>\n",
       "      <th>class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>63.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>145.0</td>\n",
       "      <td>233.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.3</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>67.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>160.0</td>\n",
       "      <td>286.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>108.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.5</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>67.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>229.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>129.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.6</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>37.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>250.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>187.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>41.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>204.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>172.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>298</th>\n",
       "      <td>45.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>264.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>132.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299</th>\n",
       "      <td>68.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>144.0</td>\n",
       "      <td>193.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>141.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.4</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>300</th>\n",
       "      <td>57.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>131.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>115.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>301</th>\n",
       "      <td>57.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>236.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>174.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>302</th>\n",
       "      <td>38.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>138.0</td>\n",
       "      <td>175.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>173.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>?</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>303 rows Ã— 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      age  sex   cp  trestbps   chol  fbs  restecg  thalach  exang  oldpeak  \\\n",
       "0    63.0  1.0  1.0     145.0  233.0  1.0      2.0    150.0    0.0      2.3   \n",
       "1    67.0  1.0  4.0     160.0  286.0  0.0      2.0    108.0    1.0      1.5   \n",
       "2    67.0  1.0  4.0     120.0  229.0  0.0      2.0    129.0    1.0      2.6   \n",
       "3    37.0  1.0  3.0     130.0  250.0  0.0      0.0    187.0    0.0      3.5   \n",
       "4    41.0  0.0  2.0     130.0  204.0  0.0      2.0    172.0    0.0      1.4   \n",
       "..    ...  ...  ...       ...    ...  ...      ...      ...    ...      ...   \n",
       "298  45.0  1.0  1.0     110.0  264.0  0.0      0.0    132.0    0.0      1.2   \n",
       "299  68.0  1.0  4.0     144.0  193.0  1.0      0.0    141.0    0.0      3.4   \n",
       "300  57.0  1.0  4.0     130.0  131.0  0.0      0.0    115.0    1.0      1.2   \n",
       "301  57.0  0.0  2.0     130.0  236.0  0.0      2.0    174.0    0.0      0.0   \n",
       "302  38.0  1.0  3.0     138.0  175.0  0.0      0.0    173.0    0.0      0.0   \n",
       "\n",
       "     slope   ca thal  class  \n",
       "0      3.0  0.0  6.0      0  \n",
       "1      2.0  3.0  3.0      1  \n",
       "2      2.0  2.0  7.0      1  \n",
       "3      3.0  0.0  3.0      0  \n",
       "4      1.0  0.0  3.0      0  \n",
       "..     ...  ...  ...    ...  \n",
       "298    2.0  0.0  7.0      1  \n",
       "299    2.0  2.0  7.0      1  \n",
       "300    2.0  1.0  7.0      1  \n",
       "301    2.0  1.0  3.0      1  \n",
       "302    1.0    ?  3.0      0  \n",
       "\n",
       "[303 rows x 14 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Getting the Dataset\n",
    "url = \"http://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data\"\n",
    "names = ['age',\n",
    "        'sex',\n",
    "        'cp',          # cp = chest pain\n",
    "        'trestbps',    # trestbps = resting blood pressure\n",
    "        'chol',        # chol - cholesterol\n",
    "        'fbs',         # fbs = fasting blood sugar      \n",
    "        'restecg',     # restecg = resting electrocardiographic results\n",
    "        'thalach',     # thalach = maximum heart rate achieved\n",
    "        'exang',       # exang = exercise induced angina\n",
    "        'oldpeak',     # oldpeak = ST depression induced by exercise relative to rest\n",
    "        'slope',       # slope = the slope of the peak exercise ST segment\n",
    "        'ca',          # ca = number of major vessels (0-3) colored by flourosopy\n",
    "        'thal',        # thal = 3 = normal; 6 = fixed defect; 7 = reversable defec\n",
    "        'class']\n",
    "df = pd.read_csv(url, names=names)\n",
    "df['class'] = df['class'].apply(lambda x: 0 if x == 0 else 1)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(303, 14)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      age  sex   cp  trestbps   chol  fbs  restecg  thalach  exang  oldpeak  \\\n",
      "280  57.0  1.0  4.0     110.0  335.0  0.0      0.0    143.0    1.0      3.0   \n",
      "281  47.0  1.0  3.0     130.0  253.0  0.0      0.0    179.0    0.0      0.0   \n",
      "282  55.0  0.0  4.0     128.0  205.0  0.0      1.0    130.0    1.0      2.0   \n",
      "283  35.0  1.0  2.0     122.0  192.0  0.0      0.0    174.0    0.0      0.0   \n",
      "284  61.0  1.0  4.0     148.0  203.0  0.0      0.0    161.0    0.0      0.0   \n",
      "285  58.0  1.0  4.0     114.0  318.0  0.0      1.0    140.0    0.0      4.4   \n",
      "286  58.0  0.0  4.0     170.0  225.0  1.0      2.0    146.0    1.0      2.8   \n",
      "287  58.0  1.0  2.0     125.0  220.0  0.0      0.0    144.0    0.0      0.4   \n",
      "288  56.0  1.0  2.0     130.0  221.0  0.0      2.0    163.0    0.0      0.0   \n",
      "289  56.0  1.0  2.0     120.0  240.0  0.0      0.0    169.0    0.0      0.0   \n",
      "290  67.0  1.0  3.0     152.0  212.0  0.0      2.0    150.0    0.0      0.8   \n",
      "291  55.0  0.0  2.0     132.0  342.0  0.0      0.0    166.0    0.0      1.2   \n",
      "292  44.0  1.0  4.0     120.0  169.0  0.0      0.0    144.0    1.0      2.8   \n",
      "293  63.0  1.0  4.0     140.0  187.0  0.0      2.0    144.0    1.0      4.0   \n",
      "294  63.0  0.0  4.0     124.0  197.0  0.0      0.0    136.0    1.0      0.0   \n",
      "295  41.0  1.0  2.0     120.0  157.0  0.0      0.0    182.0    0.0      0.0   \n",
      "296  59.0  1.0  4.0     164.0  176.0  1.0      2.0     90.0    0.0      1.0   \n",
      "297  57.0  0.0  4.0     140.0  241.0  0.0      0.0    123.0    1.0      0.2   \n",
      "298  45.0  1.0  1.0     110.0  264.0  0.0      0.0    132.0    0.0      1.2   \n",
      "299  68.0  1.0  4.0     144.0  193.0  1.0      0.0    141.0    0.0      3.4   \n",
      "300  57.0  1.0  4.0     130.0  131.0  0.0      0.0    115.0    1.0      1.2   \n",
      "301  57.0  0.0  2.0     130.0  236.0  0.0      2.0    174.0    0.0      0.0   \n",
      "302  38.0  1.0  3.0     138.0  175.0  0.0      0.0    173.0    0.0      0.0   \n",
      "\n",
      "     slope   ca thal  class  \n",
      "280    2.0  1.0  7.0      1  \n",
      "281    1.0  0.0  3.0      0  \n",
      "282    2.0  1.0  7.0      1  \n",
      "283    1.0  0.0  3.0      0  \n",
      "284    1.0  1.0  7.0      1  \n",
      "285    3.0  3.0  6.0      1  \n",
      "286    2.0  2.0  6.0      1  \n",
      "287    2.0  NaN  7.0      0  \n",
      "288    1.0  0.0  7.0      0  \n",
      "289    3.0  0.0  3.0      0  \n",
      "290    2.0  0.0  7.0      1  \n",
      "291    1.0  0.0  3.0      0  \n",
      "292    3.0  0.0  6.0      1  \n",
      "293    1.0  2.0  7.0      1  \n",
      "294    2.0  0.0  3.0      1  \n",
      "295    1.0  0.0  3.0      0  \n",
      "296    2.0  2.0  6.0      1  \n",
      "297    2.0  0.0  7.0      1  \n",
      "298    2.0  0.0  7.0      1  \n",
      "299    2.0  2.0  7.0      1  \n",
      "300    2.0  1.0  7.0      1  \n",
      "301    2.0  1.0  3.0      1  \n",
      "302    1.0  NaN  3.0      0  \n"
     ]
    }
   ],
   "source": [
    "# remove the missing data (indicated with a '?')\n",
    "df = df[~df.isin(['?'])]\n",
    "print(df.loc[280:])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(303, 14)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      age  sex   cp  trestbps   chol  fbs  restecg  thalach  exang  oldpeak  \\\n",
      "280  57.0  1.0  4.0     110.0  335.0  0.0      0.0    143.0    1.0      3.0   \n",
      "281  47.0  1.0  3.0     130.0  253.0  0.0      0.0    179.0    0.0      0.0   \n",
      "282  55.0  0.0  4.0     128.0  205.0  0.0      1.0    130.0    1.0      2.0   \n",
      "283  35.0  1.0  2.0     122.0  192.0  0.0      0.0    174.0    0.0      0.0   \n",
      "284  61.0  1.0  4.0     148.0  203.0  0.0      0.0    161.0    0.0      0.0   \n",
      "285  58.0  1.0  4.0     114.0  318.0  0.0      1.0    140.0    0.0      4.4   \n",
      "286  58.0  0.0  4.0     170.0  225.0  1.0      2.0    146.0    1.0      2.8   \n",
      "288  56.0  1.0  2.0     130.0  221.0  0.0      2.0    163.0    0.0      0.0   \n",
      "289  56.0  1.0  2.0     120.0  240.0  0.0      0.0    169.0    0.0      0.0   \n",
      "290  67.0  1.0  3.0     152.0  212.0  0.0      2.0    150.0    0.0      0.8   \n",
      "291  55.0  0.0  2.0     132.0  342.0  0.0      0.0    166.0    0.0      1.2   \n",
      "292  44.0  1.0  4.0     120.0  169.0  0.0      0.0    144.0    1.0      2.8   \n",
      "293  63.0  1.0  4.0     140.0  187.0  0.0      2.0    144.0    1.0      4.0   \n",
      "294  63.0  0.0  4.0     124.0  197.0  0.0      0.0    136.0    1.0      0.0   \n",
      "295  41.0  1.0  2.0     120.0  157.0  0.0      0.0    182.0    0.0      0.0   \n",
      "296  59.0  1.0  4.0     164.0  176.0  1.0      2.0     90.0    0.0      1.0   \n",
      "297  57.0  0.0  4.0     140.0  241.0  0.0      0.0    123.0    1.0      0.2   \n",
      "298  45.0  1.0  1.0     110.0  264.0  0.0      0.0    132.0    0.0      1.2   \n",
      "299  68.0  1.0  4.0     144.0  193.0  1.0      0.0    141.0    0.0      3.4   \n",
      "300  57.0  1.0  4.0     130.0  131.0  0.0      0.0    115.0    1.0      1.2   \n",
      "301  57.0  0.0  2.0     130.0  236.0  0.0      2.0    174.0    0.0      0.0   \n",
      "\n",
      "     slope   ca thal  class  \n",
      "280    2.0  1.0  7.0      1  \n",
      "281    1.0  0.0  3.0      0  \n",
      "282    2.0  1.0  7.0      1  \n",
      "283    1.0  0.0  3.0      0  \n",
      "284    1.0  1.0  7.0      1  \n",
      "285    3.0  3.0  6.0      1  \n",
      "286    2.0  2.0  6.0      1  \n",
      "288    1.0  0.0  7.0      0  \n",
      "289    3.0  0.0  3.0      0  \n",
      "290    2.0  0.0  7.0      1  \n",
      "291    1.0  0.0  3.0      0  \n",
      "292    3.0  0.0  6.0      1  \n",
      "293    1.0  2.0  7.0      1  \n",
      "294    2.0  0.0  3.0      1  \n",
      "295    1.0  0.0  3.0      0  \n",
      "296    2.0  2.0  6.0      1  \n",
      "297    2.0  0.0  7.0      1  \n",
      "298    2.0  0.0  7.0      1  \n",
      "299    2.0  2.0  7.0      1  \n",
      "300    2.0  1.0  7.0      1  \n",
      "301    2.0  1.0  3.0      1  \n"
     ]
    }
   ],
   "source": [
    "# drop rows with NaN values from dataframe\n",
    "df = df.dropna(axis=0)\n",
    "print(df.loc[280:])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(297, 14)\n",
      "age         float64\n",
      "sex         float64\n",
      "cp          float64\n",
      "trestbps    float64\n",
      "chol        float64\n",
      "fbs         float64\n",
      "restecg     float64\n",
      "thalach     float64\n",
      "exang       float64\n",
      "oldpeak     float64\n",
      "slope       float64\n",
      "ca           object\n",
      "thal         object\n",
      "class         int64\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "# print the shape and data type of the dataframe\n",
    "print (df.shape)\n",
    "print (df.dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "age         float64\n",
      "sex         float64\n",
      "cp          float64\n",
      "trestbps    float64\n",
      "chol        float64\n",
      "fbs         float64\n",
      "restecg     float64\n",
      "thalach     float64\n",
      "exang       float64\n",
      "oldpeak     float64\n",
      "slope       float64\n",
      "ca          float64\n",
      "thal        float64\n",
      "class         int64\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "# transform data to numeric to enable further analysis\n",
    "df = df.apply(pd.to_numeric)\n",
    "print(df.dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              age         sex          cp    trestbps        chol         fbs  \\\n",
      "count  297.000000  297.000000  297.000000  297.000000  297.000000  297.000000   \n",
      "mean    54.542088    0.676768    3.158249  131.693603  247.350168    0.144781   \n",
      "std      9.049736    0.468500    0.964859   17.762806   51.997583    0.352474   \n",
      "min     29.000000    0.000000    1.000000   94.000000  126.000000    0.000000   \n",
      "25%     48.000000    0.000000    3.000000  120.000000  211.000000    0.000000   \n",
      "50%     56.000000    1.000000    3.000000  130.000000  243.000000    0.000000   \n",
      "75%     61.000000    1.000000    4.000000  140.000000  276.000000    0.000000   \n",
      "max     77.000000    1.000000    4.000000  200.000000  564.000000    1.000000   \n",
      "\n",
      "          restecg     thalach       exang     oldpeak       slope          ca  \\\n",
      "count  297.000000  297.000000  297.000000  297.000000  297.000000  297.000000   \n",
      "mean     0.996633  149.599327    0.326599    1.055556    1.602694    0.676768   \n",
      "std      0.994914   22.941562    0.469761    1.166123    0.618187    0.938965   \n",
      "min      0.000000   71.000000    0.000000    0.000000    1.000000    0.000000   \n",
      "25%      0.000000  133.000000    0.000000    0.000000    1.000000    0.000000   \n",
      "50%      1.000000  153.000000    0.000000    0.800000    2.000000    0.000000   \n",
      "75%      2.000000  166.000000    1.000000    1.600000    2.000000    1.000000   \n",
      "max      2.000000  202.000000    1.000000    6.200000    3.000000    3.000000   \n",
      "\n",
      "             thal       class  \n",
      "count  297.000000  297.000000  \n",
      "mean     4.730640    0.461279  \n",
      "std      1.938629    0.499340  \n",
      "min      3.000000    0.000000  \n",
      "25%      3.000000    0.000000  \n",
      "50%      3.000000    0.000000  \n",
      "75%      7.000000    1.000000  \n",
      "max      7.000000    1.000000  \n"
     ]
    }
   ],
   "source": [
    "# print data characteristics using pandas in-built describe() function\n",
    "print(df.describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    160\n",
       "1    137\n",
       "Name: class, dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#0 = No and 1 = yes\n",
    "df['class'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "58.0    18\n",
       "57.0    17\n",
       "54.0    16\n",
       "59.0    14\n",
       "60.0    12\n",
       "51.0    12\n",
       "56.0    11\n",
       "62.0    11\n",
       "44.0    11\n",
       "52.0    11\n",
       "41.0    10\n",
       "64.0    10\n",
       "63.0     9\n",
       "67.0     9\n",
       "55.0     8\n",
       "42.0     8\n",
       "65.0     8\n",
       "61.0     8\n",
       "45.0     8\n",
       "46.0     7\n",
       "53.0     7\n",
       "43.0     7\n",
       "66.0     7\n",
       "50.0     7\n",
       "48.0     7\n",
       "47.0     5\n",
       "49.0     5\n",
       "39.0     4\n",
       "68.0     4\n",
       "35.0     4\n",
       "70.0     4\n",
       "69.0     3\n",
       "40.0     3\n",
       "71.0     3\n",
       "34.0     2\n",
       "37.0     2\n",
       "74.0     1\n",
       "29.0     1\n",
       "77.0     1\n",
       "38.0     1\n",
       "76.0     1\n",
       "Name: age, dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Age Distribution of Heart Disease\n",
    "df['age'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#Importing dataset\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt  \n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "\n",
    "from warnings import filterwarnings\n",
    "filterwarnings(action='ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Class Distribution: 0 = No and 1 = Yes\n",
    "sns.countplot(df['class'])\n",
    "plt.show()\n",
    "plt.rcParams['figure.figsize'] = [10,6]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 720x720 with 0 Axes>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 720x720 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(df['chol'])\n",
    "plt.figure(figsize=(10,10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x864 with 16 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot histograms for each variable\n",
    "df.hist(figsize = (12, 12), bins = 20)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x864 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# heat map for expressing correlation\n",
    "corr = df.corr()\n",
    "plt.figure(figsize=(12, 12))\n",
    "sns.heatmap(corr,annot=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Analysis "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Features Extraction Sucessfull\n"
     ]
    }
   ],
   "source": [
    "# feature selection\n",
    "X = df.drop(columns=['class'])\n",
    "Y = df['class']\n",
    "print(\"Features Extraction Sucessfull\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.07262596 0.04054145 0.11593065 0.06254791 0.05975995 0.01964236\n",
      " 0.03205281 0.08577195 0.07947336 0.07748596 0.05515199 0.11894556\n",
      " 0.18007009]\n"
     ]
    }
   ],
   "source": [
    "# feature importance\n",
    "\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "model = LogisticRegression()\n",
    "\n",
    "from sklearn.ensemble import ExtraTreesClassifier\n",
    "classifiern = ExtraTreesClassifier()\n",
    "classifiern.fit(X,Y)\n",
    "score = classifiern.feature_importances_\n",
    "print(score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Splitting Dataset\n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Running the ML models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy Score: 0.9333333333333333\n",
      "Precision 0.9473684210526315\n"
     ]
    }
   ],
   "source": [
    "# Using Logistic Regression\n",
    "\n",
    "from sklearn import metrics\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "log_reg = LogisticRegression(random_state=1)\n",
    "log_reg.fit(X_train,Y_train)\n",
    "Y_pred_logreg = log_reg.predict(X_test)\n",
    "\n",
    "from sklearn.metrics import accuracy_score,confusion_matrix\n",
    "print(\"Accuracy Score:\",accuracy_score(Y_test,Y_pred_logreg))\n",
    "print('Precision', metrics.precision_score(Y_test, Y_pred_logreg))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# ROC Curve For Logistic Regression\n",
    "y_pred_prob = log_reg.predict_proba(X_test)[::,1]\n",
    "fpr, tpr, _ = metrics.roc_curve(Y_test, y_pred_prob)\n",
    "auc = metrics.roc_auc_score(Y_test,y_pred_prob)\n",
    "plt.plot(fpr, tpr, label = 'data 1, auc ='+str(auc))\n",
    "plt.legend(loc=4)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(51.0, 0.5, 'Actual')"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Confusion Matrix of Logistic Regression \n",
    "C_M = confusion_matrix(Y_test, Y_pred_logreg)\n",
    "import seaborn as sn\n",
    "plt.figure(figsize=(8,6))\n",
    "fig = sn.heatmap(C_M, annot=True)\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('Actual')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy Score: 0.7555555555555555\n",
      "Precision 0.7045454545454546\n"
     ]
    }
   ],
   "source": [
    "# Decision Tree Accuracy Score\n",
    "\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "dtree = DecisionTreeClassifier(criterion='entropy',random_state=1)\n",
    "dtree.fit(X_train,Y_train)\n",
    "y_pred_dtree = dtree.predict(X_test)\n",
    "\n",
    "from sklearn.metrics import accuracy_score\n",
    "print(\"Accuracy Score:\",accuracy_score(Y_test,y_pred_dtree))\n",
    "print('Precision', metrics.precision_score(Y_test, y_pred_dtree))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#ROC Curve For Decisio Tree\n",
    "y_pred_prob = dtree.predict_proba(X_test)[::,1]\n",
    "fpr, tpr, _ = metrics.roc_curve(Y_test, y_pred_prob)\n",
    "auc = metrics.roc_auc_score(Y_test,y_pred_prob)\n",
    "plt.plot(fpr, tpr, label = 'data 1, auc ='+str(auc))\n",
    "plt.legend(loc=4)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(51.0, 0.5, 'Actual')"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Confusion Matrix of Decision Tree\n",
    "C_M = confusion_matrix(Y_test, y_pred_dtree)\n",
    "import seaborn as sn\n",
    "plt.figure(figsize=(8,6))\n",
    "fig = sn.heatmap(C_M, annot=True)\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('Actual')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.66666667 0.78571429 0.75609756 0.70731707 0.75609756]\n",
      "0.7343786295005806 0.04218059105688463\n"
     ]
    }
   ],
   "source": [
    "# model improvement for Decisison Tree\n",
    "#DecisionTree 5 fold cross validation\n",
    "\n",
    "import sklearn\n",
    "from sklearn.ensemble import BaggingClassifier\n",
    "dt = DecisionTreeClassifier(random_state=1)\n",
    "results = sklearn.model_selection.cross_val_score(dt, X_train,Y_train, cv=5)\n",
    "print(results)\n",
    "print(results.mean(), results.std())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# BAGGING Ensemble for Decision Tree\n",
    "# Create a bag of estimators of size 100\n",
    "\n",
    "dt_bag = BaggingClassifier(base_estimator=dt, n_estimators = 100, random_state=1, n_jobs=-1)\n",
    "\n",
    "# Fit / Train model\n",
    "dt_bag.fit(X_train,Y_train)\n",
    "\n",
    "#Results\n",
    "results = dt_bag.score(X_test, Y_test)\n",
    "results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy Score: 0.8666666666666667\n",
      "Precision 0.8333333333333334\n"
     ]
    }
   ],
   "source": [
    "# Using Random Forest\n",
    "\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "rf = RandomForestClassifier(random_state=1)\n",
    "rf.fit(X_train, Y_train)\n",
    "y_pred2_rf = rf.predict(X_test)\n",
    "\n",
    "from sklearn.metrics import accuracy_score\n",
    "print(\"Accuracy Score:\",accuracy_score(Y_test,y_pred2_rf))\n",
    "print('Precision', metrics.precision_score(Y_test, y_pred2_rf))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#ROC Curve For Random Forest\n",
    "y_pred_prob = rf.predict_proba(X_test)[::,1]\n",
    "fpr, tpr, _ = metrics.roc_curve(Y_test, y_pred_prob)\n",
    "auc = metrics.roc_auc_score(Y_test,y_pred_prob)\n",
    "plt.plot(fpr, tpr, label = 'data 1, auc ='+str(auc))\n",
    "plt.legend(loc=4)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(51.0, 0.5, 'Actual')"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Confusion Matrix of Random Forest\n",
    "C_M = confusion_matrix(Y_test, y_pred2_rf)\n",
    "import seaborn as sn\n",
    "plt.figure(figsize=(8,6))\n",
    "fig = sn.heatmap(C_M, annot=True)\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('Actual')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[16:36:42] WARNING: C:/Users/Administrator/workspace/xgboost-win64_release_1.3.0/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "Accuracy Score: 0.8111111111111111\n",
      "Precision 0.8108108108108109\n"
     ]
    }
   ],
   "source": [
    "# Using Xgboost\n",
    "\n",
    "import xgboost as xgb\n",
    "xgb = xgb.XGBClassifier(random_state=1)\n",
    "xgb.fit(X_train, Y_train)\n",
    "y_pred5_xgboost = xgb.predict(X_test)\n",
    "from sklearn.metrics import accuracy_score\n",
    "print(\"Accuracy Score:\",accuracy_score(Y_test,y_pred5_xgboost))\n",
    "print('Precision', metrics.precision_score(Y_test, y_pred5_xgboost))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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9OjRsXW/+tWv/KabbmrxGrW1tZ6dne21tbW+f/9+z87O9v3797u7+xVXXOFPP/20u7svXLjQH3nkkVgt06dP9/r6en/jjTd8woQJ7u5eV1fnOTk5vn37dv/ss8+8oKDAt27d6u7uixcv9nvuucfd3e+55x7/3ve+1+axKC4u9o0bN3p9fb1Pnz49diwefvhhX7hwobu7P/30037llVcm/L24u2/YsMFLS0tPOI7NxfvdklTirWSaNkemzKyXpIclXSIpX9IcM8tv1uwSSXmNjwWSHk1AzgMApLif/OQnGjlypL785S/r3Xffja3/5S9/qeLiYo0bN06XX365Dh8+rI0bN2rNmjVavHixCgsLtX379rjtmhsyZIiKi4vbdXfVj370IxUXF2vMmDFasGBBbPRj8uTJKikpkSTt27dPWVlZkqRjx47plltu0dixY1VQUKAHH3yw3cdi9erVmj17tk4//XRlZ2crNzc3NurUlJnp0KFDkqSDBw/qnHPOkSSVl5drypQpsfc8YMCAWK0ff/yx7rvvPt1xxx2Ralm3bp2mTp2qs846S2eeeaamTp2qF198Ue6u9evXa9asWZKkefPmadWqVbH6586dKzPTxIkT9eGHH6qmpkabN29Wbm6ucnJydNppp2n27NlavXp17Dnz5s2Lu694x6KmpkaHDh3SpEmTZGaaO3fuCc85vq9Zs2bpz3/+s9w9oe9Fki688EKdddZZkY5jVFHu5psgqcLdd0iSma2UNFNS03HamZKebExum8xsgJmlu3tNQqsFAMT1Xy9sVfnuQwndZ/45/XTnZaNb3V5aWqqVK1fqrbfeUl1dncaPH6/zzjtPkvT1r39d119/vSTpjjvu0OOPP65vf/vbmjFjhr761a/GPgAHDBgQt12oRYsW6Yc//KEk6eqrr9bvf/97XXbZZa22X7ZsmSorK/XWW28pLS1N+/fvb9Hm3nvv1a9//esW6y+88EI98MADqq6u1sSJE2PrMzMzVV1d3aL9/fffr2nTpumWW25RfX29Nm7cKEkaN25cLITs2rVLpaWl2rVrlyZMmKAf/OAH+u53v6szzjijxf6ee+45vfrqqxoxYoSWLFmioUOHqrq6WkOHDm1RS21trQYMGKC0tLQWNbb2nHjr33zzTUnSBx98oPT0dElSenq69uzZE9tXvGPRu3dvZWZmxj1GTV8n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\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#ROC Curve For XGBoost\n",
    "y_pred_prob = xgb.predict_proba(X_test)[::,1]\n",
    "fpr, tpr, _ = metrics.roc_curve(Y_test, y_pred_prob)\n",
    "auc = metrics.roc_auc_score(Y_test,y_pred_prob)\n",
    "plt.plot(fpr, tpr, label = 'data 1, auc ='+str(auc))\n",
    "plt.legend(loc=4)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(51.0, 0.5, 'Actual')"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Confusion Matrix of Xgboost\n",
    "C_M = confusion_matrix(Y_test, y_pred5_xgboost)\n",
    "import seaborn as sn\n",
    "plt.figure(figsize=(8,6))\n",
    "fig = sn.heatmap(C_M, annot=True)\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('Actual')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n",
      "7/7 [==============================] - 1s 4ms/step - loss: 0.7148 - accuracy: 0.5037\n",
      "Epoch 2/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.6975 - accuracy: 0.5367\n",
      "Epoch 3/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.6871 - accuracy: 0.5606\n",
      "Epoch 4/1000\n",
      "7/7 [==============================] - 0s 9ms/step - loss: 0.6933 - accuracy: 0.5397\n",
      "Epoch 5/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.6911 - accuracy: 0.5434\n",
      "Epoch 6/1000\n",
      "7/7 [==============================] - 0s 13ms/step - loss: 0.6839 - accuracy: 0.5666\n",
      "Epoch 7/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.6974 - accuracy: 0.5153\n",
      "Epoch 8/1000\n",
      "7/7 [==============================] - 0s 8ms/step - loss: 0.6900 - accuracy: 0.5422\n",
      "Epoch 9/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.6953 - accuracy: 0.5162\n",
      "Epoch 10/1000\n",
      "7/7 [==============================] - 0s 11ms/step - loss: 0.6856 - accuracy: 0.5622\n",
      "Epoch 11/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.6900 - accuracy: 0.5392\n",
      "Epoch 12/1000\n",
      "7/7 [==============================] - 0s 11ms/step - loss: 0.6901 - accuracy: 0.5385\n",
      "Epoch 13/1000\n",
      "7/7 [==============================] - 0s 12ms/step - loss: 0.6891 - accuracy: 0.5446\n",
      "Epoch 14/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.6846 - accuracy: 0.5784\n",
      "Epoch 15/1000\n",
      "7/7 [==============================] - ETA: 0s - loss: 0.6910 - accuracy: 0.53 - 0s 11ms/step - loss: 0.6910 - accuracy: 0.5323\n",
      "Epoch 16/1000\n",
      "7/7 [==============================] - 0s 9ms/step - loss: 0.6914 - accuracy: 0.5281\n",
      "Epoch 17/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.6887 - accuracy: 0.5513\n",
      "Epoch 18/1000\n",
      "7/7 [==============================] - 0s 17ms/step - loss: 0.6904 - accuracy: 0.5368\n",
      "Epoch 19/1000\n",
      "7/7 [==============================] - 0s 8ms/step - loss: 0.6934 - accuracy: 0.5123\n",
      "Epoch 20/1000\n",
      "7/7 [==============================] - 0s 7ms/step - loss: 0.6910 - accuracy: 0.5310\n",
      "Epoch 21/1000\n",
      "7/7 [==============================] - 0s 14ms/step - loss: 0.6911 - accuracy: 0.5310\n",
      "Epoch 22/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.6920 - accuracy: 0.5228\n",
      "Epoch 23/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.6840 - accuracy: 0.5829\n",
      "Epoch 24/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.6889 - accuracy: 0.5452\n",
      "Epoch 25/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.6862 - accuracy: 0.5650\n",
      "Epoch 26/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.6888 - accuracy: 0.5483\n",
      "Epoch 27/1000\n",
      "7/7 [==============================] - 0s 9ms/step - loss: 0.6914 - accuracy: 0.5274\n",
      "Epoch 28/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.6929 - accuracy: 0.5103\n",
      "Epoch 29/1000\n",
      "7/7 [==============================] - 0s 17ms/step - loss: 0.6925 - accuracy: 0.5135\n",
      "Epoch 30/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.6896 - accuracy: 0.5440\n",
      "Epoch 31/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.6892 - accuracy: 0.5473\n",
      "Epoch 32/1000\n",
      "7/7 [==============================] - 0s 10ms/step - loss: 0.6924 - accuracy: 0.5144\n",
      "Epoch 33/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.6941 - accuracy: 0.5002\n",
      "Epoch 34/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.6900 - accuracy: 0.5355\n",
      "Epoch 35/1000\n",
      "7/7 [==============================] - 0s 10ms/step - loss: 0.6899 - accuracy: 0.5366\n",
      "Epoch 36/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.6908 - accuracy: 0.5274\n",
      "Epoch 37/1000\n",
      "7/7 [==============================] - 0s 8ms/step - loss: 0.6935 - accuracy: 0.5065\n",
      "Epoch 38/1000\n",
      "7/7 [==============================] - 0s 7ms/step - loss: 0.6932 - accuracy: 0.5074\n",
      "Epoch 39/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.6906 - accuracy: 0.5287\n",
      "Epoch 40/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.6908 - accuracy: 0.5282\n",
      "Epoch 41/1000\n",
      "7/7 [==============================] - 0s 7ms/step - loss: 0.6868 - accuracy: 0.5606\n",
      "Epoch 42/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.6882 - accuracy: 0.5485\n",
      "Epoch 43/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.6924 - accuracy: 0.5140\n",
      "Epoch 44/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.6886 - accuracy: 0.5458\n",
      "Epoch 45/1000\n",
      "7/7 [==============================] - 0s 8ms/step - loss: 0.6913 - accuracy: 0.5194\n",
      "Epoch 46/1000\n",
      "7/7 [==============================] - 0s 7ms/step - loss: 0.6877 - accuracy: 0.5505\n",
      "Epoch 47/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.6897 - accuracy: 0.5312\n",
      "Epoch 48/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.6874 - accuracy: 0.5513\n",
      "Epoch 49/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.6889 - accuracy: 0.5386\n",
      "Epoch 50/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.6889 - accuracy: 0.5391\n",
      "Epoch 51/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.6895 - accuracy: 0.5352\n",
      "Epoch 52/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.6876 - accuracy: 0.5442\n",
      "Epoch 53/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.6856 - accuracy: 0.5616\n",
      "Epoch 54/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.6941 - accuracy: 0.5043\n",
      "Epoch 55/1000\n",
      "7/7 [==============================] - 0s 7ms/step - loss: 0.6957 - accuracy: 0.4819\n",
      "Epoch 56/1000\n",
      "7/7 [==============================] - ETA: 0s - loss: 0.6875 - accuracy: 0.53 - 0s 6ms/step - loss: 0.6881 - accuracy: 0.5383\n",
      "Epoch 57/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.6885 - accuracy: 0.5339\n",
      "Epoch 58/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.6877 - accuracy: 0.5392\n",
      "Epoch 59/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.6887 - accuracy: 0.5280\n",
      "Epoch 60/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.6863 - accuracy: 0.5522\n",
      "Epoch 61/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.6871 - accuracy: 0.5391\n",
      "Epoch 62/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.6902 - accuracy: 0.5136\n",
      "Epoch 63/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.6906 - accuracy: 0.5195\n",
      "Epoch 64/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.6855 - accuracy: 0.5475\n",
      "Epoch 65/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.6870 - accuracy: 0.5364\n",
      "Epoch 66/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.6901 - accuracy: 0.5143\n",
      "Epoch 67/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.6824 - accuracy: 0.5690\n",
      "Epoch 68/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.6887 - accuracy: 0.5204\n",
      "Epoch 69/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.6837 - accuracy: 0.5485\n",
      "Epoch 70/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.6851 - accuracy: 0.5384\n",
      "Epoch 71/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.6873 - accuracy: 0.5183\n",
      "Epoch 72/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.6813 - accuracy: 0.5608\n",
      "Epoch 73/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.6905 - accuracy: 0.5040\n",
      "Epoch 74/1000\n",
      "7/7 [==============================] - 0s 9ms/step - loss: 0.6852 - accuracy: 0.5256\n",
      "Epoch 75/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.6864 - accuracy: 0.5213\n",
      "Epoch 76/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.6851 - accuracy: 0.5195\n",
      "Epoch 77/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.6823 - accuracy: 0.5358\n",
      "Epoch 78/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.6796 - accuracy: 0.5646\n",
      "Epoch 79/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.6824 - accuracy: 0.5213\n",
      "Epoch 80/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.6802 - accuracy: 0.5380\n",
      "Epoch 81/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.6783 - accuracy: 0.5378\n",
      "Epoch 82/1000\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7/7 [==============================] - 0s 4ms/step - loss: 0.6752 - accuracy: 0.5903\n",
      "Epoch 83/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.6759 - accuracy: 0.5725\n",
      "Epoch 84/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.6777 - accuracy: 0.5413\n",
      "Epoch 85/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.6769 - accuracy: 0.5415\n",
      "Epoch 86/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.6800 - accuracy: 0.5792\n",
      "Epoch 87/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.6769 - accuracy: 0.6231\n",
      "Epoch 88/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.6780 - accuracy: 0.6245\n",
      "Epoch 89/1000\n",
      "7/7 [==============================] - 0s 13ms/step - loss: 0.6806 - accuracy: 0.6132\n",
      "Epoch 90/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.6745 - accuracy: 0.6508\n",
      "Epoch 91/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.6737 - accuracy: 0.6432\n",
      "Epoch 92/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.6699 - accuracy: 0.6385\n",
      "Epoch 93/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.6671 - accuracy: 0.6673\n",
      "Epoch 94/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.6678 - accuracy: 0.6489\n",
      "Epoch 95/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.6654 - accuracy: 0.6799\n",
      "Epoch 96/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.6732 - accuracy: 0.6100\n",
      "Epoch 97/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.6655 - accuracy: 0.6463\n",
      "Epoch 98/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.6620 - accuracy: 0.6801\n",
      "Epoch 99/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.6701 - accuracy: 0.6230\n",
      "Epoch 100/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.6646 - accuracy: 0.6720\n",
      "Epoch 101/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.6641 - accuracy: 0.6493\n",
      "Epoch 102/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.6537 - accuracy: 0.6747\n",
      "Epoch 103/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.6529 - accuracy: 0.6736\n",
      "Epoch 104/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.6716 - accuracy: 0.6004\n",
      "Epoch 105/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.6455 - accuracy: 0.6825\n",
      "Epoch 106/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.6526 - accuracy: 0.6564\n",
      "Epoch 107/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.6483 - accuracy: 0.6849\n",
      "Epoch 108/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.6413 - accuracy: 0.6955\n",
      "Epoch 109/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.6368 - accuracy: 0.7045\n",
      "Epoch 110/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.6350 - accuracy: 0.6967\n",
      "Epoch 111/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.6373 - accuracy: 0.6782\n",
      "Epoch 112/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.6430 - accuracy: 0.6702\n",
      "Epoch 113/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.6299 - accuracy: 0.6959\n",
      "Epoch 114/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.6430 - accuracy: 0.6646\n",
      "Epoch 115/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.6234 - accuracy: 0.7040\n",
      "Epoch 116/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.6213 - accuracy: 0.6845\n",
      "Epoch 117/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.6133 - accuracy: 0.7249\n",
      "Epoch 118/1000\n",
      "7/7 [==============================] - 0s 7ms/step - loss: 0.6085 - accuracy: 0.7349\n",
      "Epoch 119/1000\n",
      "7/7 [==============================] - ETA: 0s - loss: 0.6049 - accuracy: 0.75 - 0s 3ms/step - loss: 0.6088 - accuracy: 0.7248\n",
      "Epoch 120/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.6124 - accuracy: 0.7222\n",
      "Epoch 121/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.6239 - accuracy: 0.6743\n",
      "Epoch 122/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.6191 - accuracy: 0.6916\n",
      "Epoch 123/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.6213 - accuracy: 0.7010\n",
      "Epoch 124/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.6491 - accuracy: 0.6448\n",
      "Epoch 125/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.5954 - accuracy: 0.7468\n",
      "Epoch 126/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.5994 - accuracy: 0.7196\n",
      "Epoch 127/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.6148 - accuracy: 0.6719\n",
      "Epoch 128/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.5869 - accuracy: 0.7441\n",
      "Epoch 129/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.6018 - accuracy: 0.7078\n",
      "Epoch 130/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.5913 - accuracy: 0.7176\n",
      "Epoch 131/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.5767 - accuracy: 0.7337\n",
      "Epoch 132/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.5943 - accuracy: 0.7272\n",
      "Epoch 133/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.5790 - accuracy: 0.7324\n",
      "Epoch 134/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.5702 - accuracy: 0.7347\n",
      "Epoch 135/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.5781 - accuracy: 0.7304\n",
      "Epoch 136/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.5842 - accuracy: 0.6718\n",
      "Epoch 137/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.5690 - accuracy: 0.7266\n",
      "Epoch 138/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.5596 - accuracy: 0.7346\n",
      "Epoch 139/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.5810 - accuracy: 0.7273\n",
      "Epoch 140/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.5780 - accuracy: 0.7125\n",
      "Epoch 141/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.5762 - accuracy: 0.7070\n",
      "Epoch 142/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.5574 - accuracy: 0.7228\n",
      "Epoch 143/1000\n",
      "7/7 [==============================] - 0s 7ms/step - loss: 0.5464 - accuracy: 0.7461\n",
      "Epoch 144/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.5328 - accuracy: 0.7591\n",
      "Epoch 145/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.5631 - accuracy: 0.7049\n",
      "Epoch 146/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.5543 - accuracy: 0.7169\n",
      "Epoch 147/1000\n",
      "7/7 [==============================] - 0s 7ms/step - loss: 0.5403 - accuracy: 0.7438\n",
      "Epoch 148/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.5507 - accuracy: 0.7323\n",
      "Epoch 149/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.5431 - accuracy: 0.7517\n",
      "Epoch 150/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.5402 - accuracy: 0.7304\n",
      "Epoch 151/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.5542 - accuracy: 0.6957\n",
      "Epoch 152/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.5518 - accuracy: 0.7287\n",
      "Epoch 153/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.5309 - accuracy: 0.7499\n",
      "Epoch 154/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.5394 - accuracy: 0.7117\n",
      "Epoch 155/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.5425 - accuracy: 0.7459\n",
      "Epoch 156/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.5423 - accuracy: 0.7536\n",
      "Epoch 157/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.5381 - accuracy: 0.7378\n",
      "Epoch 158/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.5291 - accuracy: 0.7436\n",
      "Epoch 159/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.5128 - accuracy: 0.7623\n",
      "Epoch 160/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.5254 - accuracy: 0.7728\n",
      "Epoch 161/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.5291 - accuracy: 0.7409\n",
      "Epoch 162/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.5295 - accuracy: 0.7536\n",
      "Epoch 163/1000\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7/7 [==============================] - 0s 5ms/step - loss: 0.5231 - accuracy: 0.7109\n",
      "Epoch 164/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4863 - accuracy: 0.7992\n",
      "Epoch 165/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.5129 - accuracy: 0.7625\n",
      "Epoch 166/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.5166 - accuracy: 0.7811\n",
      "Epoch 167/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.5210 - accuracy: 0.7549\n",
      "Epoch 168/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.4798 - accuracy: 0.8025\n",
      "Epoch 169/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.5192 - accuracy: 0.7830\n",
      "Epoch 170/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4991 - accuracy: 0.7987\n",
      "Epoch 171/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.5061 - accuracy: 0.7928\n",
      "Epoch 172/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.5032 - accuracy: 0.7606\n",
      "Epoch 173/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.5551 - accuracy: 0.7076\n",
      "Epoch 174/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.5256 - accuracy: 0.7311\n",
      "Epoch 175/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4947 - accuracy: 0.7891\n",
      "Epoch 176/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.5595 - accuracy: 0.7202\n",
      "Epoch 177/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.5412 - accuracy: 0.7544\n",
      "Epoch 178/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.5146 - accuracy: 0.7789\n",
      "Epoch 179/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.5072 - accuracy: 0.7765\n",
      "Epoch 180/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4941 - accuracy: 0.7831\n",
      "Epoch 181/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.5653 - accuracy: 0.7200\n",
      "Epoch 182/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.5157 - accuracy: 0.7639\n",
      "Epoch 183/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.5143 - accuracy: 0.7690\n",
      "Epoch 184/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.5342 - accuracy: 0.7466\n",
      "Epoch 185/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.5045 - accuracy: 0.7880\n",
      "Epoch 186/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.5105 - accuracy: 0.7606\n",
      "Epoch 187/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.4871 - accuracy: 0.7936\n",
      "Epoch 188/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.5091 - accuracy: 0.7883\n",
      "Epoch 189/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4893 - accuracy: 0.7807\n",
      "Epoch 190/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4919 - accuracy: 0.7900\n",
      "Epoch 191/1000\n",
      "7/7 [==============================] - 0s 7ms/step - loss: 0.5158 - accuracy: 0.7598\n",
      "Epoch 192/1000\n",
      "7/7 [==============================] - 0s 7ms/step - loss: 0.5156 - accuracy: 0.7411\n",
      "Epoch 193/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.5167 - accuracy: 0.7731\n",
      "Epoch 194/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.5135 - accuracy: 0.7456\n",
      "Epoch 195/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.5282 - accuracy: 0.7523\n",
      "Epoch 196/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.5234 - accuracy: 0.7360\n",
      "Epoch 197/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4949 - accuracy: 0.7803\n",
      "Epoch 198/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.5172 - accuracy: 0.7753\n",
      "Epoch 199/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4809 - accuracy: 0.7936\n",
      "Epoch 200/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4950 - accuracy: 0.7739\n",
      "Epoch 201/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4736 - accuracy: 0.7792\n",
      "Epoch 202/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.5126 - accuracy: 0.7565\n",
      "Epoch 203/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4972 - accuracy: 0.7775\n",
      "Epoch 204/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4914 - accuracy: 0.7873\n",
      "Epoch 205/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4865 - accuracy: 0.7921\n",
      "Epoch 206/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4779 - accuracy: 0.7918\n",
      "Epoch 207/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.5120 - accuracy: 0.7557\n",
      "Epoch 208/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4757 - accuracy: 0.7848\n",
      "Epoch 209/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.5057 - accuracy: 0.7699\n",
      "Epoch 210/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4929 - accuracy: 0.7650\n",
      "Epoch 211/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.5030 - accuracy: 0.7784\n",
      "Epoch 212/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4804 - accuracy: 0.7806\n",
      "Epoch 213/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4810 - accuracy: 0.7767\n",
      "Epoch 214/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4867 - accuracy: 0.7684\n",
      "Epoch 215/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4823 - accuracy: 0.7754\n",
      "Epoch 216/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.5091 - accuracy: 0.7495\n",
      "Epoch 217/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4651 - accuracy: 0.7768\n",
      "Epoch 218/1000\n",
      "7/7 [==============================] - 0s 7ms/step - loss: 0.4733 - accuracy: 0.7917\n",
      "Epoch 219/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.5018 - accuracy: 0.7671\n",
      "Epoch 220/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4942 - accuracy: 0.7763\n",
      "Epoch 221/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.5094 - accuracy: 0.7780\n",
      "Epoch 222/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.5097 - accuracy: 0.7656\n",
      "Epoch 223/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.5081 - accuracy: 0.7392\n",
      "Epoch 224/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4707 - accuracy: 0.7906\n",
      "Epoch 225/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4641 - accuracy: 0.8060\n",
      "Epoch 226/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4971 - accuracy: 0.7622\n",
      "Epoch 227/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4795 - accuracy: 0.7876\n",
      "Epoch 228/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4404 - accuracy: 0.8068\n",
      "Epoch 229/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4923 - accuracy: 0.7586\n",
      "Epoch 230/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4545 - accuracy: 0.8076\n",
      "Epoch 231/1000\n",
      "7/7 [==============================] - 0s 13ms/step - loss: 0.5034 - accuracy: 0.7727\n",
      "Epoch 232/1000\n",
      "7/7 [==============================] - 0s 7ms/step - loss: 0.4579 - accuracy: 0.7962\n",
      "Epoch 233/1000\n",
      "7/7 [==============================] - 0s 8ms/step - loss: 0.4779 - accuracy: 0.7751\n",
      "Epoch 234/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4730 - accuracy: 0.7658\n",
      "Epoch 235/1000\n",
      "7/7 [==============================] - 0s 13ms/step - loss: 0.5229 - accuracy: 0.7646\n",
      "Epoch 236/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4672 - accuracy: 0.7755\n",
      "Epoch 237/1000\n",
      "7/7 [==============================] - 0s 14ms/step - loss: 0.5079 - accuracy: 0.7605\n",
      "Epoch 238/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4964 - accuracy: 0.7427\n",
      "Epoch 239/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4647 - accuracy: 0.7877\n",
      "Epoch 240/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4728 - accuracy: 0.8073\n",
      "Epoch 241/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4898 - accuracy: 0.7849\n",
      "Epoch 242/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4857 - accuracy: 0.7882\n",
      "Epoch 243/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4629 - accuracy: 0.7892\n",
      "Epoch 244/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4583 - accuracy: 0.7964\n",
      "Epoch 245/1000\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4692 - accuracy: 0.7950\n",
      "Epoch 246/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4831 - accuracy: 0.7580\n",
      "Epoch 247/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4966 - accuracy: 0.7535\n",
      "Epoch 248/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.4633 - accuracy: 0.7862\n",
      "Epoch 249/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4676 - accuracy: 0.7767\n",
      "Epoch 250/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.5037 - accuracy: 0.7639\n",
      "Epoch 251/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.4803 - accuracy: 0.7701\n",
      "Epoch 252/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4654 - accuracy: 0.7821\n",
      "Epoch 253/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4800 - accuracy: 0.7757\n",
      "Epoch 254/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4608 - accuracy: 0.7949\n",
      "Epoch 255/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4527 - accuracy: 0.8115\n",
      "Epoch 256/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4525 - accuracy: 0.7940\n",
      "Epoch 257/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.5026 - accuracy: 0.7645\n",
      "Epoch 258/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4853 - accuracy: 0.7606\n",
      "Epoch 259/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4487 - accuracy: 0.8008\n",
      "Epoch 260/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.4761 - accuracy: 0.7868\n",
      "Epoch 261/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4850 - accuracy: 0.7743\n",
      "Epoch 262/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4956 - accuracy: 0.7627\n",
      "Epoch 263/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.4950 - accuracy: 0.7741\n",
      "Epoch 264/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4853 - accuracy: 0.7702\n",
      "Epoch 265/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4837 - accuracy: 0.7768\n",
      "Epoch 266/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4944 - accuracy: 0.7574\n",
      "Epoch 267/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4903 - accuracy: 0.7688\n",
      "Epoch 268/1000\n",
      "7/7 [==============================] - 0s 7ms/step - loss: 0.4886 - accuracy: 0.7623\n",
      "Epoch 269/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4854 - accuracy: 0.7791\n",
      "Epoch 270/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4679 - accuracy: 0.7944\n",
      "Epoch 271/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.4752 - accuracy: 0.7666\n",
      "Epoch 272/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.5093 - accuracy: 0.7563\n",
      "Epoch 273/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4657 - accuracy: 0.7777\n",
      "Epoch 274/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4898 - accuracy: 0.7723\n",
      "Epoch 275/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4441 - accuracy: 0.7900\n",
      "Epoch 276/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4949 - accuracy: 0.7522\n",
      "Epoch 277/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.4825 - accuracy: 0.7669\n",
      "Epoch 278/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4836 - accuracy: 0.7687\n",
      "Epoch 279/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4692 - accuracy: 0.7811\n",
      "Epoch 280/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4882 - accuracy: 0.7504\n",
      "Epoch 281/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4730 - accuracy: 0.7465\n",
      "Epoch 282/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4918 - accuracy: 0.7430\n",
      "Epoch 283/1000\n",
      "7/7 [==============================] - 0s 11ms/step - loss: 0.5140 - accuracy: 0.7556\n",
      "Epoch 284/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4978 - accuracy: 0.7613\n",
      "Epoch 285/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4387 - accuracy: 0.7988\n",
      "Epoch 286/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4613 - accuracy: 0.7831\n",
      "Epoch 287/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4541 - accuracy: 0.7969\n",
      "Epoch 288/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4368 - accuracy: 0.8218\n",
      "Epoch 289/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4820 - accuracy: 0.7470\n",
      "Epoch 290/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4725 - accuracy: 0.7768\n",
      "Epoch 291/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4689 - accuracy: 0.7917\n",
      "Epoch 292/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4700 - accuracy: 0.7513\n",
      "Epoch 293/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4654 - accuracy: 0.7625\n",
      "Epoch 294/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4670 - accuracy: 0.7681\n",
      "Epoch 295/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.4592 - accuracy: 0.7895\n",
      "Epoch 296/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4721 - accuracy: 0.7804\n",
      "Epoch 297/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4685 - accuracy: 0.7766\n",
      "Epoch 298/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4871 - accuracy: 0.7823\n",
      "Epoch 299/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4943 - accuracy: 0.7440\n",
      "Epoch 300/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4839 - accuracy: 0.7403\n",
      "Epoch 301/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.4792 - accuracy: 0.7680\n",
      "Epoch 302/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4719 - accuracy: 0.7701\n",
      "Epoch 303/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4858 - accuracy: 0.7693\n",
      "Epoch 304/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4732 - accuracy: 0.7576\n",
      "Epoch 305/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4968 - accuracy: 0.7337\n",
      "Epoch 306/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.5154 - accuracy: 0.7281\n",
      "Epoch 307/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4781 - accuracy: 0.7560\n",
      "Epoch 308/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4582 - accuracy: 0.7755\n",
      "Epoch 309/1000\n",
      "7/7 [==============================] - 0s 2ms/step - loss: 0.4637 - accuracy: 0.7790\n",
      "Epoch 310/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4528 - accuracy: 0.8010\n",
      "Epoch 311/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.5011 - accuracy: 0.7505\n",
      "Epoch 312/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4847 - accuracy: 0.7604\n",
      "Epoch 313/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4532 - accuracy: 0.7609\n",
      "Epoch 314/1000\n",
      "7/7 [==============================] - 0s 2ms/step - loss: 0.4836 - accuracy: 0.7458\n",
      "Epoch 315/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4838 - accuracy: 0.7912\n",
      "Epoch 316/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4649 - accuracy: 0.8047\n",
      "Epoch 317/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4559 - accuracy: 0.7940\n",
      "Epoch 318/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4641 - accuracy: 0.7721\n",
      "Epoch 319/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4819 - accuracy: 0.7864\n",
      "Epoch 320/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4564 - accuracy: 0.7781\n",
      "Epoch 321/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4769 - accuracy: 0.7871\n",
      "Epoch 322/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.4809 - accuracy: 0.7595\n",
      "Epoch 323/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4783 - accuracy: 0.7536\n",
      "Epoch 324/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4620 - accuracy: 0.7639\n",
      "Epoch 325/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4515 - accuracy: 0.7898\n",
      "Epoch 326/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4327 - accuracy: 0.7984\n",
      "Epoch 327/1000\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4953 - accuracy: 0.7190\n",
      "Epoch 328/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.5066 - accuracy: 0.7431\n",
      "Epoch 329/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4977 - accuracy: 0.7458\n",
      "Epoch 330/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4689 - accuracy: 0.7716\n",
      "Epoch 331/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4938 - accuracy: 0.7710\n",
      "Epoch 332/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4459 - accuracy: 0.7784\n",
      "Epoch 333/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4461 - accuracy: 0.7878\n",
      "Epoch 334/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4752 - accuracy: 0.7553\n",
      "Epoch 335/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4511 - accuracy: 0.7991\n",
      "Epoch 336/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.5010 - accuracy: 0.7399\n",
      "Epoch 337/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4816 - accuracy: 0.7597\n",
      "Epoch 338/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4904 - accuracy: 0.7632\n",
      "Epoch 339/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4519 - accuracy: 0.7787\n",
      "Epoch 340/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4594 - accuracy: 0.7705\n",
      "Epoch 341/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4571 - accuracy: 0.7620\n",
      "Epoch 342/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4675 - accuracy: 0.7399\n",
      "Epoch 343/1000\n",
      "7/7 [==============================] - 0s 7ms/step - loss: 0.4821 - accuracy: 0.7482\n",
      "Epoch 344/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.4688 - accuracy: 0.7484\n",
      "Epoch 345/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.5178 - accuracy: 0.7553\n",
      "Epoch 346/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4878 - accuracy: 0.7502\n",
      "Epoch 347/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4450 - accuracy: 0.7573\n",
      "Epoch 348/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4719 - accuracy: 0.7776\n",
      "Epoch 349/1000\n",
      "7/7 [==============================] - ETA: 0s - loss: 0.5074 - accuracy: 0.68 - 0s 5ms/step - loss: 0.4424 - accuracy: 0.7633\n",
      "Epoch 350/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4585 - accuracy: 0.7586\n",
      "Epoch 351/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4840 - accuracy: 0.7893\n",
      "Epoch 352/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4691 - accuracy: 0.7561\n",
      "Epoch 353/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4360 - accuracy: 0.7778\n",
      "Epoch 354/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.4468 - accuracy: 0.7663\n",
      "Epoch 355/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4924 - accuracy: 0.7238\n",
      "Epoch 356/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4419 - accuracy: 0.7746\n",
      "Epoch 357/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4789 - accuracy: 0.7531\n",
      "Epoch 358/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4230 - accuracy: 0.7791\n",
      "Epoch 359/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4027 - accuracy: 0.8225\n",
      "Epoch 360/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.4684 - accuracy: 0.7899\n",
      "Epoch 361/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4328 - accuracy: 0.8070\n",
      "Epoch 362/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4790 - accuracy: 0.7558\n",
      "Epoch 363/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4558 - accuracy: 0.7874\n",
      "Epoch 364/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4514 - accuracy: 0.7778\n",
      "Epoch 365/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4726 - accuracy: 0.7654\n",
      "Epoch 366/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4359 - accuracy: 0.8203\n",
      "Epoch 367/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3981 - accuracy: 0.8084\n",
      "Epoch 368/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4609 - accuracy: 0.7730\n",
      "Epoch 369/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4717 - accuracy: 0.7801\n",
      "Epoch 370/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4447 - accuracy: 0.7612\n",
      "Epoch 371/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4112 - accuracy: 0.8148\n",
      "Epoch 372/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4799 - accuracy: 0.7686\n",
      "Epoch 373/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4419 - accuracy: 0.7913\n",
      "Epoch 374/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4319 - accuracy: 0.7797\n",
      "Epoch 375/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4603 - accuracy: 0.7625\n",
      "Epoch 376/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.4644 - accuracy: 0.7811\n",
      "Epoch 377/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4838 - accuracy: 0.7809\n",
      "Epoch 378/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4784 - accuracy: 0.7746\n",
      "Epoch 379/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4611 - accuracy: 0.7949\n",
      "Epoch 380/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4922 - accuracy: 0.7833\n",
      "Epoch 381/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4214 - accuracy: 0.8396\n",
      "Epoch 382/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4177 - accuracy: 0.8237\n",
      "Epoch 383/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4114 - accuracy: 0.8128\n",
      "Epoch 384/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4431 - accuracy: 0.8089\n",
      "Epoch 385/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.4485 - accuracy: 0.7984\n",
      "Epoch 386/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.4152 - accuracy: 0.8339\n",
      "Epoch 387/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4059 - accuracy: 0.8356\n",
      "Epoch 388/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4466 - accuracy: 0.8121\n",
      "Epoch 389/1000\n",
      "7/7 [==============================] - 0s 11ms/step - loss: 0.4293 - accuracy: 0.8250\n",
      "Epoch 390/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4657 - accuracy: 0.7968\n",
      "Epoch 391/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.4172 - accuracy: 0.8140\n",
      "Epoch 392/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4603 - accuracy: 0.7863\n",
      "Epoch 393/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.4102 - accuracy: 0.8229\n",
      "Epoch 394/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4512 - accuracy: 0.8114\n",
      "Epoch 395/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4326 - accuracy: 0.8122\n",
      "Epoch 396/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4068 - accuracy: 0.8190\n",
      "Epoch 397/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.4522 - accuracy: 0.8061\n",
      "Epoch 398/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4367 - accuracy: 0.8013\n",
      "Epoch 399/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4630 - accuracy: 0.7963\n",
      "Epoch 400/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4345 - accuracy: 0.7987\n",
      "Epoch 401/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4305 - accuracy: 0.8171\n",
      "Epoch 402/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4263 - accuracy: 0.8278\n",
      "Epoch 403/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4302 - accuracy: 0.8190\n",
      "Epoch 404/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4612 - accuracy: 0.7959\n",
      "Epoch 405/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4938 - accuracy: 0.7708\n",
      "Epoch 406/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4452 - accuracy: 0.7996\n",
      "Epoch 407/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4132 - accuracy: 0.8210\n",
      "Epoch 408/1000\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4504 - accuracy: 0.8013\n",
      "Epoch 409/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4585 - accuracy: 0.7949\n",
      "Epoch 410/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4275 - accuracy: 0.8084\n",
      "Epoch 411/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4092 - accuracy: 0.8265\n",
      "Epoch 412/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4190 - accuracy: 0.8188\n",
      "Epoch 413/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4108 - accuracy: 0.8143\n",
      "Epoch 414/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4234 - accuracy: 0.8383\n",
      "Epoch 415/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4180 - accuracy: 0.8297\n",
      "Epoch 416/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4201 - accuracy: 0.8298\n",
      "Epoch 417/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4212 - accuracy: 0.8174\n",
      "Epoch 418/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4217 - accuracy: 0.8162\n",
      "Epoch 419/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4344 - accuracy: 0.8130\n",
      "Epoch 420/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3872 - accuracy: 0.8503\n",
      "Epoch 421/1000\n",
      "7/7 [==============================] - 0s 8ms/step - loss: 0.4006 - accuracy: 0.8374\n",
      "Epoch 422/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.4581 - accuracy: 0.8117\n",
      "Epoch 423/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4018 - accuracy: 0.8529\n",
      "Epoch 424/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4281 - accuracy: 0.7936\n",
      "Epoch 425/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4455 - accuracy: 0.7923\n",
      "Epoch 426/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3683 - accuracy: 0.8545\n",
      "Epoch 427/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4192 - accuracy: 0.8102\n",
      "Epoch 428/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.4007 - accuracy: 0.8225\n",
      "Epoch 429/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4383 - accuracy: 0.8006\n",
      "Epoch 430/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4348 - accuracy: 0.8140\n",
      "Epoch 431/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4145 - accuracy: 0.8181\n",
      "Epoch 432/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.3696 - accuracy: 0.8473\n",
      "Epoch 433/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3907 - accuracy: 0.8453\n",
      "Epoch 434/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4095 - accuracy: 0.8152\n",
      "Epoch 435/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4411 - accuracy: 0.8035\n",
      "Epoch 436/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4239 - accuracy: 0.8162\n",
      "Epoch 437/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4071 - accuracy: 0.8377\n",
      "Epoch 438/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3943 - accuracy: 0.8396\n",
      "Epoch 439/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4509 - accuracy: 0.7897\n",
      "Epoch 440/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4211 - accuracy: 0.8190\n",
      "Epoch 441/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3956 - accuracy: 0.8394\n",
      "Epoch 442/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4117 - accuracy: 0.8272\n",
      "Epoch 443/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3932 - accuracy: 0.8289\n",
      "Epoch 444/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4105 - accuracy: 0.8146\n",
      "Epoch 445/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3806 - accuracy: 0.8419\n",
      "Epoch 446/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4019 - accuracy: 0.8273\n",
      "Epoch 447/1000\n",
      "7/7 [==============================] - 0s 2ms/step - loss: 0.4098 - accuracy: 0.8491\n",
      "Epoch 448/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4429 - accuracy: 0.8097\n",
      "Epoch 449/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4076 - accuracy: 0.8176\n",
      "Epoch 450/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4588 - accuracy: 0.8063\n",
      "Epoch 451/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4328 - accuracy: 0.8312\n",
      "Epoch 452/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4439 - accuracy: 0.8043\n",
      "Epoch 453/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4006 - accuracy: 0.8229\n",
      "Epoch 454/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4151 - accuracy: 0.8393\n",
      "Epoch 455/1000\n",
      "7/7 [==============================] - 0s 8ms/step - loss: 0.3986 - accuracy: 0.8258\n",
      "Epoch 456/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4089 - accuracy: 0.8224\n",
      "Epoch 457/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4203 - accuracy: 0.8092\n",
      "Epoch 458/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4038 - accuracy: 0.8194\n",
      "Epoch 459/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4145 - accuracy: 0.8168\n",
      "Epoch 460/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3982 - accuracy: 0.8441\n",
      "Epoch 461/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4220 - accuracy: 0.8112\n",
      "Epoch 462/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4286 - accuracy: 0.8262\n",
      "Epoch 463/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4383 - accuracy: 0.8026\n",
      "Epoch 464/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3891 - accuracy: 0.8373\n",
      "Epoch 465/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3775 - accuracy: 0.8411\n",
      "Epoch 466/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3797 - accuracy: 0.8490\n",
      "Epoch 467/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4307 - accuracy: 0.8085\n",
      "Epoch 468/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3876 - accuracy: 0.8421\n",
      "Epoch 469/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.4624 - accuracy: 0.8051\n",
      "Epoch 470/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4156 - accuracy: 0.8284\n",
      "Epoch 471/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3718 - accuracy: 0.8313\n",
      "Epoch 472/1000\n",
      "7/7 [==============================] - ETA: 0s - loss: 0.4542 - accuracy: 0.71 - 0s 3ms/step - loss: 0.4262 - accuracy: 0.7920\n",
      "Epoch 473/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4604 - accuracy: 0.7879\n",
      "Epoch 474/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3959 - accuracy: 0.8251\n",
      "Epoch 475/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4082 - accuracy: 0.8282\n",
      "Epoch 476/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4152 - accuracy: 0.8218\n",
      "Epoch 477/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4353 - accuracy: 0.8038\n",
      "Epoch 478/1000\n",
      "7/7 [==============================] - 0s 2ms/step - loss: 0.4390 - accuracy: 0.8122\n",
      "Epoch 479/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4109 - accuracy: 0.8224\n",
      "Epoch 480/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4266 - accuracy: 0.8205\n",
      "Epoch 481/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4271 - accuracy: 0.8216\n",
      "Epoch 482/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4176 - accuracy: 0.8106\n",
      "Epoch 483/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3925 - accuracy: 0.8321\n",
      "Epoch 484/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4083 - accuracy: 0.8137\n",
      "Epoch 485/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3935 - accuracy: 0.8310\n",
      "Epoch 486/1000\n",
      "7/7 [==============================] - 0s 7ms/step - loss: 0.4477 - accuracy: 0.7934\n",
      "Epoch 487/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3902 - accuracy: 0.8358\n",
      "Epoch 488/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3914 - accuracy: 0.8452\n",
      "Epoch 489/1000\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4264 - accuracy: 0.8235\n",
      "Epoch 490/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4033 - accuracy: 0.8125\n",
      "Epoch 491/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3918 - accuracy: 0.8272\n",
      "Epoch 492/1000\n",
      "7/7 [==============================] - 0s 11ms/step - loss: 0.3902 - accuracy: 0.8308\n",
      "Epoch 493/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3839 - accuracy: 0.8380\n",
      "Epoch 494/1000\n",
      "7/7 [==============================] - 0s 17ms/step - loss: 0.3787 - accuracy: 0.8308\n",
      "Epoch 495/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3975 - accuracy: 0.8259\n",
      "Epoch 496/1000\n",
      "7/7 [==============================] - 0s 7ms/step - loss: 0.4133 - accuracy: 0.8269\n",
      "Epoch 497/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4342 - accuracy: 0.7856\n",
      "Epoch 498/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4301 - accuracy: 0.8099\n",
      "Epoch 499/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3832 - accuracy: 0.8582\n",
      "Epoch 500/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4130 - accuracy: 0.8077\n",
      "Epoch 501/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3940 - accuracy: 0.8250\n",
      "Epoch 502/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4103 - accuracy: 0.8208\n",
      "Epoch 503/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3803 - accuracy: 0.8537\n",
      "Epoch 504/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3622 - accuracy: 0.8392\n",
      "Epoch 505/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4088 - accuracy: 0.8181\n",
      "Epoch 506/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3789 - accuracy: 0.8271\n",
      "Epoch 507/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3886 - accuracy: 0.8496\n",
      "Epoch 508/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4000 - accuracy: 0.8273\n",
      "Epoch 509/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4457 - accuracy: 0.8090\n",
      "Epoch 510/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.4134 - accuracy: 0.8256\n",
      "Epoch 511/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4120 - accuracy: 0.8260\n",
      "Epoch 512/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3996 - accuracy: 0.8301\n",
      "Epoch 513/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3752 - accuracy: 0.8361\n",
      "Epoch 514/1000\n",
      "7/7 [==============================] - 0s 2ms/step - loss: 0.4092 - accuracy: 0.8295\n",
      "Epoch 515/1000\n",
      "7/7 [==============================] - 0s 8ms/step - loss: 0.4003 - accuracy: 0.8287\n",
      "Epoch 516/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3807 - accuracy: 0.8457\n",
      "Epoch 517/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.3729 - accuracy: 0.8700\n",
      "Epoch 518/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4232 - accuracy: 0.8133\n",
      "Epoch 519/1000\n",
      "7/7 [==============================] - 0s 7ms/step - loss: 0.3597 - accuracy: 0.8558\n",
      "Epoch 520/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4094 - accuracy: 0.8266\n",
      "Epoch 521/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3830 - accuracy: 0.8228\n",
      "Epoch 522/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.4165 - accuracy: 0.8196\n",
      "Epoch 523/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.3627 - accuracy: 0.8329\n",
      "Epoch 524/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3758 - accuracy: 0.8501\n",
      "Epoch 525/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3647 - accuracy: 0.8535\n",
      "Epoch 526/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.4258 - accuracy: 0.8100\n",
      "Epoch 527/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4178 - accuracy: 0.8171\n",
      "Epoch 528/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4836 - accuracy: 0.7914\n",
      "Epoch 529/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3767 - accuracy: 0.8531\n",
      "Epoch 530/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3858 - accuracy: 0.8627\n",
      "Epoch 531/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4319 - accuracy: 0.8177\n",
      "Epoch 532/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3800 - accuracy: 0.8493\n",
      "Epoch 533/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4053 - accuracy: 0.8243\n",
      "Epoch 534/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3561 - accuracy: 0.8474\n",
      "Epoch 535/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3614 - accuracy: 0.8348\n",
      "Epoch 536/1000\n",
      "7/7 [==============================] - 0s 2ms/step - loss: 0.3990 - accuracy: 0.8322\n",
      "Epoch 537/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.3963 - accuracy: 0.8474\n",
      "Epoch 538/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3491 - accuracy: 0.8704\n",
      "Epoch 539/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3972 - accuracy: 0.8225\n",
      "Epoch 540/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3984 - accuracy: 0.8436\n",
      "Epoch 541/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4264 - accuracy: 0.8289\n",
      "Epoch 542/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4532 - accuracy: 0.7866\n",
      "Epoch 543/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4088 - accuracy: 0.8239\n",
      "Epoch 544/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3854 - accuracy: 0.8478\n",
      "Epoch 545/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3881 - accuracy: 0.8305\n",
      "Epoch 546/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4209 - accuracy: 0.8224\n",
      "Epoch 547/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4296 - accuracy: 0.8061\n",
      "Epoch 548/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4212 - accuracy: 0.8244\n",
      "Epoch 549/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4199 - accuracy: 0.8303\n",
      "Epoch 550/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3716 - accuracy: 0.8514\n",
      "Epoch 551/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3957 - accuracy: 0.8458\n",
      "Epoch 552/1000\n",
      "7/7 [==============================] - 0s 8ms/step - loss: 0.3867 - accuracy: 0.8517\n",
      "Epoch 553/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3885 - accuracy: 0.8384\n",
      "Epoch 554/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4036 - accuracy: 0.8383\n",
      "Epoch 555/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3733 - accuracy: 0.8437\n",
      "Epoch 556/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3776 - accuracy: 0.8532\n",
      "Epoch 557/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3603 - accuracy: 0.8503\n",
      "Epoch 558/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3839 - accuracy: 0.8496\n",
      "Epoch 559/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3914 - accuracy: 0.8454\n",
      "Epoch 560/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3434 - accuracy: 0.8446\n",
      "Epoch 561/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3758 - accuracy: 0.8292\n",
      "Epoch 562/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3899 - accuracy: 0.8368\n",
      "Epoch 563/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4180 - accuracy: 0.8085\n",
      "Epoch 564/1000\n",
      "7/7 [==============================] - ETA: 0s - loss: 0.4085 - accuracy: 0.84 - 0s 5ms/step - loss: 0.4002 - accuracy: 0.8266\n",
      "Epoch 565/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4646 - accuracy: 0.8112\n",
      "Epoch 566/1000\n",
      "7/7 [==============================] - 0s 8ms/step - loss: 0.3705 - accuracy: 0.8570\n",
      "Epoch 567/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3787 - accuracy: 0.8505\n",
      "Epoch 568/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3967 - accuracy: 0.8285\n",
      "Epoch 569/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4038 - accuracy: 0.8402\n",
      "Epoch 570/1000\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4154 - accuracy: 0.8152\n",
      "Epoch 571/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3839 - accuracy: 0.8271\n",
      "Epoch 572/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3729 - accuracy: 0.8539\n",
      "Epoch 573/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4226 - accuracy: 0.8018\n",
      "Epoch 574/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4094 - accuracy: 0.8191\n",
      "Epoch 575/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4390 - accuracy: 0.8128\n",
      "Epoch 576/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4382 - accuracy: 0.8152\n",
      "Epoch 577/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.3373 - accuracy: 0.8697\n",
      "Epoch 578/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4036 - accuracy: 0.8347\n",
      "Epoch 579/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3856 - accuracy: 0.8535\n",
      "Epoch 580/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3599 - accuracy: 0.8368\n",
      "Epoch 581/1000\n",
      "7/7 [==============================] - 0s 7ms/step - loss: 0.4037 - accuracy: 0.8210\n",
      "Epoch 582/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4159 - accuracy: 0.8171\n",
      "Epoch 583/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3866 - accuracy: 0.8418\n",
      "Epoch 584/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3812 - accuracy: 0.8540\n",
      "Epoch 585/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.3762 - accuracy: 0.8404\n",
      "Epoch 586/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3502 - accuracy: 0.8580\n",
      "Epoch 587/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.3918 - accuracy: 0.8203\n",
      "Epoch 588/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3987 - accuracy: 0.8436\n",
      "Epoch 589/1000\n",
      "7/7 [==============================] - 0s 8ms/step - loss: 0.3626 - accuracy: 0.8471\n",
      "Epoch 590/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4250 - accuracy: 0.8182\n",
      "Epoch 591/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.3875 - accuracy: 0.8352\n",
      "Epoch 592/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4260 - accuracy: 0.8135\n",
      "Epoch 593/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4126 - accuracy: 0.8337\n",
      "Epoch 594/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3485 - accuracy: 0.8662\n",
      "Epoch 595/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3472 - accuracy: 0.8570\n",
      "Epoch 596/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4229 - accuracy: 0.8164\n",
      "Epoch 597/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4533 - accuracy: 0.8200\n",
      "Epoch 598/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3898 - accuracy: 0.8469\n",
      "Epoch 599/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.4064 - accuracy: 0.8205\n",
      "Epoch 600/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3755 - accuracy: 0.8663\n",
      "Epoch 601/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3443 - accuracy: 0.8548\n",
      "Epoch 602/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3795 - accuracy: 0.8422\n",
      "Epoch 603/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3572 - accuracy: 0.8559\n",
      "Epoch 604/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3898 - accuracy: 0.8369\n",
      "Epoch 605/1000\n",
      "7/7 [==============================] - 0s 7ms/step - loss: 0.3954 - accuracy: 0.8542\n",
      "Epoch 606/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3971 - accuracy: 0.8312\n",
      "Epoch 607/1000\n",
      "7/7 [==============================] - 0s 12ms/step - loss: 0.3600 - accuracy: 0.8770\n",
      "Epoch 608/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3777 - accuracy: 0.8458\n",
      "Epoch 609/1000\n",
      "7/7 [==============================] - 0s 7ms/step - loss: 0.4101 - accuracy: 0.8277\n",
      "Epoch 610/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4105 - accuracy: 0.8242\n",
      "Epoch 611/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4048 - accuracy: 0.8275\n",
      "Epoch 612/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3800 - accuracy: 0.8451\n",
      "Epoch 613/1000\n",
      "7/7 [==============================] - 0s 8ms/step - loss: 0.4037 - accuracy: 0.8328\n",
      "Epoch 614/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3626 - accuracy: 0.8587\n",
      "Epoch 615/1000\n",
      "7/7 [==============================] - 0s 8ms/step - loss: 0.4139 - accuracy: 0.8045\n",
      "Epoch 616/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4216 - accuracy: 0.8251\n",
      "Epoch 617/1000\n",
      "7/7 [==============================] - 0s 11ms/step - loss: 0.3626 - accuracy: 0.8606\n",
      "Epoch 618/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3947 - accuracy: 0.8517\n",
      "Epoch 619/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3853 - accuracy: 0.8462\n",
      "Epoch 620/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3984 - accuracy: 0.8200\n",
      "Epoch 621/1000\n",
      "7/7 [==============================] - 0s 8ms/step - loss: 0.4017 - accuracy: 0.8420\n",
      "Epoch 622/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3708 - accuracy: 0.8401\n",
      "Epoch 623/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3937 - accuracy: 0.8275\n",
      "Epoch 624/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3810 - accuracy: 0.8250\n",
      "Epoch 625/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3743 - accuracy: 0.8530\n",
      "Epoch 626/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.3635 - accuracy: 0.8414\n",
      "Epoch 627/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3309 - accuracy: 0.8689\n",
      "Epoch 628/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4254 - accuracy: 0.8260\n",
      "Epoch 629/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3712 - accuracy: 0.8532\n",
      "Epoch 630/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4355 - accuracy: 0.8006\n",
      "Epoch 631/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4045 - accuracy: 0.8329\n",
      "Epoch 632/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4094 - accuracy: 0.8378\n",
      "Epoch 633/1000\n",
      "7/7 [==============================] - 0s 2ms/step - loss: 0.3965 - accuracy: 0.8321\n",
      "Epoch 634/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3725 - accuracy: 0.8549\n",
      "Epoch 635/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3509 - accuracy: 0.8628\n",
      "Epoch 636/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4240 - accuracy: 0.8279\n",
      "Epoch 637/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3864 - accuracy: 0.8359\n",
      "Epoch 638/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3943 - accuracy: 0.8284\n",
      "Epoch 639/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3575 - accuracy: 0.8408\n",
      "Epoch 640/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4024 - accuracy: 0.8126\n",
      "Epoch 641/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3953 - accuracy: 0.8447\n",
      "Epoch 642/1000\n",
      "7/7 [==============================] - 0s 8ms/step - loss: 0.4229 - accuracy: 0.8267\n",
      "Epoch 643/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3611 - accuracy: 0.8538\n",
      "Epoch 644/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.3501 - accuracy: 0.8599\n",
      "Epoch 645/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4098 - accuracy: 0.8123\n",
      "Epoch 646/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4591 - accuracy: 0.7901\n",
      "Epoch 647/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4371 - accuracy: 0.8152\n",
      "Epoch 648/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4553 - accuracy: 0.7915\n",
      "Epoch 649/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4268 - accuracy: 0.8094\n",
      "Epoch 650/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4125 - accuracy: 0.7996\n",
      "Epoch 651/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.4351 - accuracy: 0.8289\n",
      "Epoch 652/1000\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3463 - accuracy: 0.8644\n",
      "Epoch 653/1000\n",
      "7/7 [==============================] - 0s 7ms/step - loss: 0.3323 - accuracy: 0.8746\n",
      "Epoch 654/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3914 - accuracy: 0.8308\n",
      "Epoch 655/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3750 - accuracy: 0.8574\n",
      "Epoch 656/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4225 - accuracy: 0.8252\n",
      "Epoch 657/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3779 - accuracy: 0.8374\n",
      "Epoch 658/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3530 - accuracy: 0.8554\n",
      "Epoch 659/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3491 - accuracy: 0.8759\n",
      "Epoch 660/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3677 - accuracy: 0.8541\n",
      "Epoch 661/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.3310 - accuracy: 0.8712\n",
      "Epoch 662/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4434 - accuracy: 0.8042\n",
      "Epoch 663/1000\n",
      "7/7 [==============================] - 0s 8ms/step - loss: 0.3721 - accuracy: 0.8384\n",
      "Epoch 664/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3518 - accuracy: 0.8662\n",
      "Epoch 665/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3600 - accuracy: 0.8545\n",
      "Epoch 666/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3799 - accuracy: 0.8304\n",
      "Epoch 667/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3958 - accuracy: 0.8316\n",
      "Epoch 668/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3668 - accuracy: 0.8405\n",
      "Epoch 669/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3612 - accuracy: 0.8672\n",
      "Epoch 670/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3824 - accuracy: 0.8364\n",
      "Epoch 671/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4032 - accuracy: 0.8438\n",
      "Epoch 672/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.3687 - accuracy: 0.8640\n",
      "Epoch 673/1000\n",
      "7/7 [==============================] - 0s 7ms/step - loss: 0.3596 - accuracy: 0.8360\n",
      "Epoch 674/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.3825 - accuracy: 0.8185\n",
      "Epoch 675/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3960 - accuracy: 0.8116\n",
      "Epoch 676/1000\n",
      "7/7 [==============================] - 0s 10ms/step - loss: 0.3833 - accuracy: 0.8708\n",
      "Epoch 677/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4213 - accuracy: 0.8430\n",
      "Epoch 678/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3782 - accuracy: 0.8457\n",
      "Epoch 679/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4486 - accuracy: 0.8184\n",
      "Epoch 680/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3726 - accuracy: 0.8557\n",
      "Epoch 681/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3456 - accuracy: 0.8615\n",
      "Epoch 682/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.3753 - accuracy: 0.8552\n",
      "Epoch 683/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3920 - accuracy: 0.8254\n",
      "Epoch 684/1000\n",
      "7/7 [==============================] - 0s 7ms/step - loss: 0.3763 - accuracy: 0.8564\n",
      "Epoch 685/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3971 - accuracy: 0.8244\n",
      "Epoch 686/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3796 - accuracy: 0.8391\n",
      "Epoch 687/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3483 - accuracy: 0.8609\n",
      "Epoch 688/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4379 - accuracy: 0.8089\n",
      "Epoch 689/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4053 - accuracy: 0.8309\n",
      "Epoch 690/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3611 - accuracy: 0.8563\n",
      "Epoch 691/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.3835 - accuracy: 0.8508\n",
      "Epoch 692/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3698 - accuracy: 0.8516\n",
      "Epoch 693/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4092 - accuracy: 0.8225\n",
      "Epoch 694/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.3928 - accuracy: 0.8473\n",
      "Epoch 695/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4215 - accuracy: 0.8248\n",
      "Epoch 696/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4322 - accuracy: 0.8211\n",
      "Epoch 697/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3688 - accuracy: 0.8559\n",
      "Epoch 698/1000\n",
      "7/7 [==============================] - 0s 2ms/step - loss: 0.3716 - accuracy: 0.8602\n",
      "Epoch 699/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3673 - accuracy: 0.8452\n",
      "Epoch 700/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3500 - accuracy: 0.8644\n",
      "Epoch 701/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3576 - accuracy: 0.8458\n",
      "Epoch 702/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3729 - accuracy: 0.8464\n",
      "Epoch 703/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4072 - accuracy: 0.8393\n",
      "Epoch 704/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3757 - accuracy: 0.8540\n",
      "Epoch 705/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.3470 - accuracy: 0.8501\n",
      "Epoch 706/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3964 - accuracy: 0.8481\n",
      "Epoch 707/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3315 - accuracy: 0.8762\n",
      "Epoch 708/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3683 - accuracy: 0.8631\n",
      "Epoch 709/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3596 - accuracy: 0.8636\n",
      "Epoch 710/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4092 - accuracy: 0.8365\n",
      "Epoch 711/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3866 - accuracy: 0.8397\n",
      "Epoch 712/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3886 - accuracy: 0.8428\n",
      "Epoch 713/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4060 - accuracy: 0.8311\n",
      "Epoch 714/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3711 - accuracy: 0.8457\n",
      "Epoch 715/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3897 - accuracy: 0.8258\n",
      "Epoch 716/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3947 - accuracy: 0.8110\n",
      "Epoch 717/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3511 - accuracy: 0.8732\n",
      "Epoch 718/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3760 - accuracy: 0.8516\n",
      "Epoch 719/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3776 - accuracy: 0.8359\n",
      "Epoch 720/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3688 - accuracy: 0.8521\n",
      "Epoch 721/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3169 - accuracy: 0.8757\n",
      "Epoch 722/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3544 - accuracy: 0.8595\n",
      "Epoch 723/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4034 - accuracy: 0.8382\n",
      "Epoch 724/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3920 - accuracy: 0.8471\n",
      "Epoch 725/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3530 - accuracy: 0.8682\n",
      "Epoch 726/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3623 - accuracy: 0.8604\n",
      "Epoch 727/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3915 - accuracy: 0.8365\n",
      "Epoch 728/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4002 - accuracy: 0.8514\n",
      "Epoch 729/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3273 - accuracy: 0.8801\n",
      "Epoch 730/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3998 - accuracy: 0.8466\n",
      "Epoch 731/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3378 - accuracy: 0.8666\n",
      "Epoch 732/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3783 - accuracy: 0.8289\n",
      "Epoch 733/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4109 - accuracy: 0.8350\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 734/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3483 - accuracy: 0.8817\n",
      "Epoch 735/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4008 - accuracy: 0.8283\n",
      "Epoch 736/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3901 - accuracy: 0.8450\n",
      "Epoch 737/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3468 - accuracy: 0.8574\n",
      "Epoch 738/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.3846 - accuracy: 0.8426\n",
      "Epoch 739/1000\n",
      "7/7 [==============================] - 0s 7ms/step - loss: 0.3270 - accuracy: 0.8719\n",
      "Epoch 740/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3753 - accuracy: 0.8507\n",
      "Epoch 741/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4065 - accuracy: 0.8284\n",
      "Epoch 742/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3740 - accuracy: 0.8569\n",
      "Epoch 743/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.4186 - accuracy: 0.8174\n",
      "Epoch 744/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.3641 - accuracy: 0.8662\n",
      "Epoch 745/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3935 - accuracy: 0.8459\n",
      "Epoch 746/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.3367 - accuracy: 0.8636\n",
      "Epoch 747/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3755 - accuracy: 0.8403\n",
      "Epoch 748/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4164 - accuracy: 0.8372\n",
      "Epoch 749/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3941 - accuracy: 0.8441\n",
      "Epoch 750/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4015 - accuracy: 0.8286\n",
      "Epoch 751/1000\n",
      "7/7 [==============================] - ETA: 0s - loss: 0.2869 - accuracy: 0.87 - 0s 6ms/step - loss: 0.3715 - accuracy: 0.8544\n",
      "Epoch 752/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3982 - accuracy: 0.8474\n",
      "Epoch 753/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3821 - accuracy: 0.8526\n",
      "Epoch 754/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3455 - accuracy: 0.8595\n",
      "Epoch 755/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3360 - accuracy: 0.8670\n",
      "Epoch 756/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3932 - accuracy: 0.8308\n",
      "Epoch 757/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3503 - accuracy: 0.8698\n",
      "Epoch 758/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3466 - accuracy: 0.8821\n",
      "Epoch 759/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3964 - accuracy: 0.8502\n",
      "Epoch 760/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3578 - accuracy: 0.8551\n",
      "Epoch 761/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3608 - accuracy: 0.8694\n",
      "Epoch 762/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3720 - accuracy: 0.8555\n",
      "Epoch 763/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3846 - accuracy: 0.8532\n",
      "Epoch 764/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3541 - accuracy: 0.8411\n",
      "Epoch 765/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3640 - accuracy: 0.8494\n",
      "Epoch 766/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3609 - accuracy: 0.8790\n",
      "Epoch 767/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3460 - accuracy: 0.8482\n",
      "Epoch 768/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3797 - accuracy: 0.8481\n",
      "Epoch 769/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3815 - accuracy: 0.8471\n",
      "Epoch 770/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3783 - accuracy: 0.8583\n",
      "Epoch 771/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.3296 - accuracy: 0.8642\n",
      "Epoch 772/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3240 - accuracy: 0.8791\n",
      "Epoch 773/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4170 - accuracy: 0.8049\n",
      "Epoch 774/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.3937 - accuracy: 0.8491\n",
      "Epoch 775/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4076 - accuracy: 0.8362\n",
      "Epoch 776/1000\n",
      "7/7 [==============================] - 0s 2ms/step - loss: 0.3304 - accuracy: 0.8534\n",
      "Epoch 777/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3736 - accuracy: 0.8337\n",
      "Epoch 778/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3850 - accuracy: 0.8425\n",
      "Epoch 779/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3819 - accuracy: 0.8613\n",
      "Epoch 780/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3741 - accuracy: 0.8417\n",
      "Epoch 781/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3480 - accuracy: 0.8603\n",
      "Epoch 782/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3660 - accuracy: 0.8612\n",
      "Epoch 783/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3446 - accuracy: 0.8674\n",
      "Epoch 784/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3495 - accuracy: 0.8540\n",
      "Epoch 785/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4280 - accuracy: 0.8150\n",
      "Epoch 786/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3697 - accuracy: 0.8477\n",
      "Epoch 787/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.4196 - accuracy: 0.8196\n",
      "Epoch 788/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3689 - accuracy: 0.8510\n",
      "Epoch 789/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3502 - accuracy: 0.8545\n",
      "Epoch 790/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3871 - accuracy: 0.8297\n",
      "Epoch 791/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4083 - accuracy: 0.8515\n",
      "Epoch 792/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3483 - accuracy: 0.8819\n",
      "Epoch 793/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3195 - accuracy: 0.8739\n",
      "Epoch 794/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4024 - accuracy: 0.8397\n",
      "Epoch 795/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3162 - accuracy: 0.8750\n",
      "Epoch 796/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3871 - accuracy: 0.8372\n",
      "Epoch 797/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3616 - accuracy: 0.8704\n",
      "Epoch 798/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4107 - accuracy: 0.8221\n",
      "Epoch 799/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3481 - accuracy: 0.8605\n",
      "Epoch 800/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3617 - accuracy: 0.8443\n",
      "Epoch 801/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3772 - accuracy: 0.8558\n",
      "Epoch 802/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3606 - accuracy: 0.8599\n",
      "Epoch 803/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3946 - accuracy: 0.8516\n",
      "Epoch 804/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3494 - accuracy: 0.8648\n",
      "Epoch 805/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3381 - accuracy: 0.8521\n",
      "Epoch 806/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3918 - accuracy: 0.8443\n",
      "Epoch 807/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3491 - accuracy: 0.8811\n",
      "Epoch 808/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3261 - accuracy: 0.8730\n",
      "Epoch 809/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3162 - accuracy: 0.8524\n",
      "Epoch 810/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3752 - accuracy: 0.8504\n",
      "Epoch 811/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3667 - accuracy: 0.8310\n",
      "Epoch 812/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3478 - accuracy: 0.8723\n",
      "Epoch 813/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3892 - accuracy: 0.8422\n",
      "Epoch 814/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3602 - accuracy: 0.8571\n",
      "Epoch 815/1000\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3779 - accuracy: 0.8586\n",
      "Epoch 816/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4046 - accuracy: 0.8484\n",
      "Epoch 817/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3881 - accuracy: 0.8330\n",
      "Epoch 818/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3158 - accuracy: 0.8696\n",
      "Epoch 819/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.3115 - accuracy: 0.8852\n",
      "Epoch 820/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3869 - accuracy: 0.8289\n",
      "Epoch 821/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3837 - accuracy: 0.8589\n",
      "Epoch 822/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3378 - accuracy: 0.8589\n",
      "Epoch 823/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3556 - accuracy: 0.8748\n",
      "Epoch 824/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3340 - accuracy: 0.8674\n",
      "Epoch 825/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3977 - accuracy: 0.8495\n",
      "Epoch 826/1000\n",
      "7/7 [==============================] - ETA: 0s - loss: 0.5054 - accuracy: 0.78 - 0s 4ms/step - loss: 0.4148 - accuracy: 0.8123\n",
      "Epoch 827/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3685 - accuracy: 0.8690\n",
      "Epoch 828/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3414 - accuracy: 0.8693\n",
      "Epoch 829/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3866 - accuracy: 0.8334\n",
      "Epoch 830/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3208 - accuracy: 0.8803\n",
      "Epoch 831/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3408 - accuracy: 0.8558\n",
      "Epoch 832/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4093 - accuracy: 0.8397\n",
      "Epoch 833/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3487 - accuracy: 0.8547\n",
      "Epoch 834/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3369 - accuracy: 0.8912\n",
      "Epoch 835/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3341 - accuracy: 0.8886\n",
      "Epoch 836/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3678 - accuracy: 0.8512\n",
      "Epoch 837/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3978 - accuracy: 0.8430\n",
      "Epoch 838/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3133 - accuracy: 0.8829\n",
      "Epoch 839/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3859 - accuracy: 0.8375\n",
      "Epoch 840/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3530 - accuracy: 0.8620\n",
      "Epoch 841/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3421 - accuracy: 0.8771\n",
      "Epoch 842/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3501 - accuracy: 0.8631\n",
      "Epoch 843/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3766 - accuracy: 0.8544\n",
      "Epoch 844/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3369 - accuracy: 0.8726\n",
      "Epoch 845/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3600 - accuracy: 0.8535\n",
      "Epoch 846/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3733 - accuracy: 0.8355\n",
      "Epoch 847/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3606 - accuracy: 0.8665\n",
      "Epoch 848/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3794 - accuracy: 0.8623\n",
      "Epoch 849/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4017 - accuracy: 0.8386\n",
      "Epoch 850/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3621 - accuracy: 0.8628\n",
      "Epoch 851/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3670 - accuracy: 0.8393\n",
      "Epoch 852/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3745 - accuracy: 0.8563\n",
      "Epoch 853/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3533 - accuracy: 0.8512\n",
      "Epoch 854/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3472 - accuracy: 0.8736\n",
      "Epoch 855/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3656 - accuracy: 0.8580\n",
      "Epoch 856/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4129 - accuracy: 0.8431\n",
      "Epoch 857/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4024 - accuracy: 0.8349\n",
      "Epoch 858/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3475 - accuracy: 0.8415\n",
      "Epoch 859/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3993 - accuracy: 0.8605\n",
      "Epoch 860/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3685 - accuracy: 0.8678\n",
      "Epoch 861/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3361 - accuracy: 0.8636\n",
      "Epoch 862/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3453 - accuracy: 0.8751\n",
      "Epoch 863/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.3133 - accuracy: 0.8688\n",
      "Epoch 864/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3568 - accuracy: 0.8627\n",
      "Epoch 865/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3341 - accuracy: 0.8666\n",
      "Epoch 866/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3430 - accuracy: 0.8841\n",
      "Epoch 867/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3727 - accuracy: 0.8575\n",
      "Epoch 868/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3860 - accuracy: 0.8522\n",
      "Epoch 869/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3292 - accuracy: 0.8726\n",
      "Epoch 870/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3412 - accuracy: 0.8649\n",
      "Epoch 871/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3594 - accuracy: 0.8565\n",
      "Epoch 872/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3943 - accuracy: 0.8404\n",
      "Epoch 873/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3444 - accuracy: 0.8717\n",
      "Epoch 874/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3839 - accuracy: 0.8622\n",
      "Epoch 875/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3301 - accuracy: 0.8732\n",
      "Epoch 876/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3407 - accuracy: 0.8637\n",
      "Epoch 877/1000\n",
      "7/7 [==============================] - 0s 2ms/step - loss: 0.3242 - accuracy: 0.8761\n",
      "Epoch 878/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4119 - accuracy: 0.8361\n",
      "Epoch 879/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3332 - accuracy: 0.8704\n",
      "Epoch 880/1000\n",
      "7/7 [==============================] - 0s 2ms/step - loss: 0.3416 - accuracy: 0.8686\n",
      "Epoch 881/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3855 - accuracy: 0.8595\n",
      "Epoch 882/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3646 - accuracy: 0.8521\n",
      "Epoch 883/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3336 - accuracy: 0.8629\n",
      "Epoch 884/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3300 - accuracy: 0.8760\n",
      "Epoch 885/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3550 - accuracy: 0.8445\n",
      "Epoch 886/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3564 - accuracy: 0.8570\n",
      "Epoch 887/1000\n",
      "7/7 [==============================] - 0s 2ms/step - loss: 0.3391 - accuracy: 0.8617\n",
      "Epoch 888/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3731 - accuracy: 0.8475\n",
      "Epoch 889/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3803 - accuracy: 0.8719\n",
      "Epoch 890/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3344 - accuracy: 0.8838\n",
      "Epoch 891/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3743 - accuracy: 0.8526\n",
      "Epoch 892/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3637 - accuracy: 0.8460\n",
      "Epoch 893/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3440 - accuracy: 0.8672\n",
      "Epoch 894/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3769 - accuracy: 0.8269\n",
      "Epoch 895/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3518 - accuracy: 0.8501\n",
      "Epoch 896/1000\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3391 - accuracy: 0.8697\n",
      "Epoch 897/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3787 - accuracy: 0.8342\n",
      "Epoch 898/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3849 - accuracy: 0.8444\n",
      "Epoch 899/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4046 - accuracy: 0.8400\n",
      "Epoch 900/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3667 - accuracy: 0.8624\n",
      "Epoch 901/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3929 - accuracy: 0.8433\n",
      "Epoch 902/1000\n",
      "7/7 [==============================] - 0s 8ms/step - loss: 0.3400 - accuracy: 0.8585\n",
      "Epoch 903/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3439 - accuracy: 0.8667\n",
      "Epoch 904/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3314 - accuracy: 0.8658\n",
      "Epoch 905/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3463 - accuracy: 0.8597\n",
      "Epoch 906/1000\n",
      "7/7 [==============================] - 0s 10ms/step - loss: 0.3040 - accuracy: 0.8888\n",
      "Epoch 907/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3392 - accuracy: 0.8577\n",
      "Epoch 908/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3640 - accuracy: 0.8620\n",
      "Epoch 909/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3325 - accuracy: 0.8598\n",
      "Epoch 910/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4054 - accuracy: 0.8390\n",
      "Epoch 911/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3482 - accuracy: 0.8777\n",
      "Epoch 912/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3119 - accuracy: 0.8847\n",
      "Epoch 913/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3550 - accuracy: 0.8697\n",
      "Epoch 914/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.4209 - accuracy: 0.8238\n",
      "Epoch 915/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3320 - accuracy: 0.8644\n",
      "Epoch 916/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4156 - accuracy: 0.8321\n",
      "Epoch 917/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3565 - accuracy: 0.8551\n",
      "Epoch 918/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3635 - accuracy: 0.8364\n",
      "Epoch 919/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3429 - accuracy: 0.8699\n",
      "Epoch 920/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3274 - accuracy: 0.8659\n",
      "Epoch 921/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3227 - accuracy: 0.8789\n",
      "Epoch 922/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3487 - accuracy: 0.8617\n",
      "Epoch 923/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3082 - accuracy: 0.8798\n",
      "Epoch 924/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3632 - accuracy: 0.8692\n",
      "Epoch 925/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3683 - accuracy: 0.8535\n",
      "Epoch 926/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3740 - accuracy: 0.8566\n",
      "Epoch 927/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3595 - accuracy: 0.8649\n",
      "Epoch 928/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3212 - accuracy: 0.8747\n",
      "Epoch 929/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3274 - accuracy: 0.8818\n",
      "Epoch 930/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.2937 - accuracy: 0.8846\n",
      "Epoch 931/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3272 - accuracy: 0.8680\n",
      "Epoch 932/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3604 - accuracy: 0.8588\n",
      "Epoch 933/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3465 - accuracy: 0.8581\n",
      "Epoch 934/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3960 - accuracy: 0.8421\n",
      "Epoch 935/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3382 - accuracy: 0.8734\n",
      "Epoch 936/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3447 - accuracy: 0.8720\n",
      "Epoch 937/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3530 - accuracy: 0.8492\n",
      "Epoch 938/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3672 - accuracy: 0.8515\n",
      "Epoch 939/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3064 - accuracy: 0.8805\n",
      "Epoch 940/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3201 - accuracy: 0.8698\n",
      "Epoch 941/1000\n",
      "7/7 [==============================] - 0s 2ms/step - loss: 0.3494 - accuracy: 0.8729\n",
      "Epoch 942/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3167 - accuracy: 0.8838\n",
      "Epoch 943/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3811 - accuracy: 0.8521\n",
      "Epoch 944/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3172 - accuracy: 0.8750\n",
      "Epoch 945/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3722 - accuracy: 0.8461\n",
      "Epoch 946/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3343 - accuracy: 0.8743\n",
      "Epoch 947/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3673 - accuracy: 0.8503\n",
      "Epoch 948/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3817 - accuracy: 0.8565\n",
      "Epoch 949/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3251 - accuracy: 0.8749\n",
      "Epoch 950/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3501 - accuracy: 0.8693\n",
      "Epoch 951/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3329 - accuracy: 0.8838\n",
      "Epoch 952/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3349 - accuracy: 0.8639\n",
      "Epoch 953/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3313 - accuracy: 0.8532\n",
      "Epoch 954/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3304 - accuracy: 0.8710\n",
      "Epoch 955/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4262 - accuracy: 0.8214\n",
      "Epoch 956/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3341 - accuracy: 0.8664\n",
      "Epoch 957/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3460 - accuracy: 0.8604\n",
      "Epoch 958/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3757 - accuracy: 0.8434\n",
      "Epoch 959/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.4392 - accuracy: 0.8230\n",
      "Epoch 960/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3300 - accuracy: 0.8664\n",
      "Epoch 961/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3745 - accuracy: 0.8515\n",
      "Epoch 962/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3732 - accuracy: 0.8658\n",
      "Epoch 963/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3289 - accuracy: 0.8680\n",
      "Epoch 964/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3162 - accuracy: 0.8651\n",
      "Epoch 965/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3904 - accuracy: 0.8609\n",
      "Epoch 966/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3198 - accuracy: 0.8806\n",
      "Epoch 967/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3957 - accuracy: 0.8646\n",
      "Epoch 968/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3382 - accuracy: 0.8754\n",
      "Epoch 969/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3373 - accuracy: 0.8491\n",
      "Epoch 970/1000\n",
      "7/7 [==============================] - 0s 2ms/step - loss: 0.3403 - accuracy: 0.8712\n",
      "Epoch 971/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3238 - accuracy: 0.8604\n",
      "Epoch 972/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3375 - accuracy: 0.8748\n",
      "Epoch 973/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3249 - accuracy: 0.8909\n",
      "Epoch 974/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3653 - accuracy: 0.8736\n",
      "Epoch 975/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.2976 - accuracy: 0.8934\n",
      "Epoch 976/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3569 - accuracy: 0.8591\n",
      "Epoch 977/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3520 - accuracy: 0.8583\n",
      "Epoch 978/1000\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3260 - accuracy: 0.8800\n",
      "Epoch 979/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3650 - accuracy: 0.8600\n",
      "Epoch 980/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.4139 - accuracy: 0.8420\n",
      "Epoch 981/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3734 - accuracy: 0.8536\n",
      "Epoch 982/1000\n",
      "7/7 [==============================] - 0s 6ms/step - loss: 0.4204 - accuracy: 0.8446\n",
      "Epoch 983/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3590 - accuracy: 0.8592\n",
      "Epoch 984/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3273 - accuracy: 0.8602\n",
      "Epoch 985/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3895 - accuracy: 0.8397\n",
      "Epoch 986/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3863 - accuracy: 0.8341\n",
      "Epoch 987/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3486 - accuracy: 0.8588\n",
      "Epoch 988/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3347 - accuracy: 0.8748\n",
      "Epoch 989/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3265 - accuracy: 0.8788\n",
      "Epoch 990/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3430 - accuracy: 0.8593\n",
      "Epoch 991/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3758 - accuracy: 0.8647\n",
      "Epoch 992/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3926 - accuracy: 0.8596\n",
      "Epoch 993/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3217 - accuracy: 0.8690\n",
      "Epoch 994/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3282 - accuracy: 0.8691\n",
      "Epoch 995/1000\n",
      "7/7 [==============================] - 0s 3ms/step - loss: 0.3325 - accuracy: 0.8743\n",
      "Epoch 996/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3486 - accuracy: 0.8721\n",
      "Epoch 997/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.3818 - accuracy: 0.8455\n",
      "Epoch 998/1000\n",
      "7/7 [==============================] - 0s 5ms/step - loss: 0.2961 - accuracy: 0.8883\n",
      "Epoch 999/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3536 - accuracy: 0.8721\n",
      "Epoch 1000/1000\n",
      "7/7 [==============================] - 0s 4ms/step - loss: 0.3325 - accuracy: 0.8816\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<tensorflow.python.keras.callbacks.History at 0x1a08c691490>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Neural Network Model\n",
    "import keras\n",
    "import tensorflow\n",
    "from keras.layers import Dense\n",
    "model8 = keras.Sequential()\n",
    "model8.add(Dense(15,input_dim=13, activation ='sigmoid'))\n",
    "model8.add(Dense(20,activation='sigmoid'))\n",
    "model8.add(Dense(12,activation='sigmoid'))\n",
    "model8.add(Dense(9,activation='sigmoid'))\n",
    "model8.add(Dense(5,activation='sigmoid'))\n",
    "model8.add(Dense(1,activation='sigmoid'))\n",
    "model8.compile(optimizer='adam',\n",
    "              loss = 'binary_crossentropy',\n",
    "              metrics = ['accuracy'])\n",
    "model8.fit(X_train, Y_train,epochs=1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3/3 [==============================] - 0s 3ms/step - loss: 0.5131 - accuracy: 0.7889\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.5130748152732849, 0.7888888716697693]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model8.evaluate(X_test,Y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                        Model\n",
      "Score                        \n",
      "0.933333  Logistic Regression\n",
      "0.866667        Random Forest\n",
      "0.811111              Xgboost\n",
      "0.755556        Decision Tree\n",
      "\n",
      "NN Accuracy\n",
      "3/3 [==============================] - 0s 4ms/step - loss: 0.5131 - accuracy: 0.7889\n",
      "[0.5130748152732849, 0.7888888716697693]\n"
     ]
    }
   ],
   "source": [
    "# Models Comparison\n",
    "\n",
    "results = pd.DataFrame({\n",
    "    'Model': ['Logistic Regression','Decision Tree','Random Forest','Xgboost'],\n",
    "    'Score': [accuracy_score(Y_test,Y_pred_logreg),\n",
    "             accuracy_score(Y_test,y_pred_dtree),\n",
    "             accuracy_score(Y_test,y_pred2_rf),\n",
    "             accuracy_score(Y_test,y_pred5_xgboost)]})\n",
    "\n",
    "result_df = results.sort_values(by='Score', ascending=False)\n",
    "result_df = result_df.set_index('Score')\n",
    "print(result_df)\n",
    "\n",
    "print('\\nNN Accuracy')\n",
    "x8 = model8.evaluate(X_test,Y_test)\n",
    "print(x8)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  Custom Ensemble (Superlearner) with the two best models in two layers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[MLENS] backend: threading\n"
     ]
    }
   ],
   "source": [
    "from mlens.ensemble import SuperLearner\n",
    "from mlens.model_selection import Evaluator\n",
    "from mlens.metrics import make_scorer\n",
    "ensemble = SuperLearner(scorer=accuracy_score, random_state=1, verbose=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SuperLearner(array_check=None, backend=None, folds=2,\n",
       "       layers=[Layer(backend='threading', dtype=<class 'numpy.float32'>, n_jobs=-1,\n",
       "   name='layer-1', propagate_features=None, raise_on_exception=True,\n",
       "   random_state=235, shuffle=False,\n",
       "   stack=[Group(backend='threading', dtype=<class 'numpy.float32'>,\n",
       "   indexer=FoldIndex(X=None, folds=2, raise_on_exc...48BB160>)],\n",
       "   n_jobs=-1, name='group-0', raise_on_exception=True, transformers=[])],\n",
       "   verbose=1)],\n",
       "       model_selection=False, n_jobs=None, raise_on_exception=True,\n",
       "       random_state=1, sample_size=20,\n",
       "       scorer=<function accuracy_score at 0x000001A0848BB160>,\n",
       "       shuffle=False, verbose=2)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Build the first layer\n",
    "ensemble.add([rf, log_reg])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SuperLearner(array_check=None, backend=None, folds=2,\n",
       "       layers=[Layer(backend='threading', dtype=<class 'numpy.float32'>, n_jobs=-1,\n",
       "   name='layer-1', propagate_features=None, raise_on_exception=True,\n",
       "   random_state=235, shuffle=False,\n",
       "   stack=[Group(backend='threading', dtype=<class 'numpy.float32'>,\n",
       "   indexer=FoldIndex(X=None, folds=2, raise_on_exc...48BB160>)],\n",
       "   n_jobs=-1, name='group-1', raise_on_exception=True, transformers=[])],\n",
       "   verbose=1)],\n",
       "       model_selection=False, n_jobs=None, raise_on_exception=True,\n",
       "       random_state=1, sample_size=20,\n",
       "       scorer=<function accuracy_score at 0x000001A0848BB160>,\n",
       "       shuffle=False, verbose=2)"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Attach the final meta estimator\n",
    "ensemble.add_meta(LogisticRegression())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Fitting 2 layers\n",
      "Processing layer-1             done | 00:00:01\n",
      "Processing layer-2             done | 00:00:00\n",
      "Fit complete                        | 00:00:01\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "SuperLearner(array_check=None, backend=None, folds=2,\n",
       "       layers=[Layer(backend='threading', dtype=<class 'numpy.float32'>, n_jobs=-1,\n",
       "   name='layer-1', propagate_features=None, raise_on_exception=True,\n",
       "   random_state=235, shuffle=False,\n",
       "   stack=[Group(backend='threading', dtype=<class 'numpy.float32'>,\n",
       "   indexer=FoldIndex(X=None, folds=2, raise_on_exc...48BB160>)],\n",
       "   n_jobs=-1, name='group-1', raise_on_exception=True, transformers=[])],\n",
       "   verbose=1)],\n",
       "       model_selection=False, n_jobs=None, raise_on_exception=True,\n",
       "       random_state=1, sample_size=20,\n",
       "       scorer=<function accuracy_score at 0x000001A0848BB160>,\n",
       "       shuffle=False, verbose=2)"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Fit ensemble\n",
    "ensemble.fit(X_train, Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Predicting 2 layers\n",
      "Processing layer-1             done | 00:00:00\n",
      "Processing layer-2             done | 00:00:00\n",
      "Predict complete                    | 00:00:00\n",
      "Accuracy - Train :  0.8260869565217391\n",
      "\n",
      "Predicting 2 layers\n",
      "Processing layer-1             done | 00:00:00\n",
      "Processing layer-2             done | 00:00:00\n",
      "Predict complete                    | 00:00:00\n",
      "Accuracy - Test :  0.9333333333333333\n"
     ]
    }
   ],
   "source": [
    "#pred_vals = ensemble.predict(X_test)\n",
    "print (\"Accuracy - Train : \", sklearn.metrics.accuracy_score(ensemble.predict(X_train), Y_train))\n",
    "print (\"Accuracy - Test : \", sklearn.metrics.accuracy_score(ensemble.predict(X_test), Y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit data:\n",
      "                                   score-m  score-s  ft-m  ft-s  pt-m  pt-s\n",
      "layer-1  logisticregression           0.82     0.04  0.18  0.03  0.00  0.00\n",
      "layer-1  randomforestclassifier       0.78     0.05  0.70  0.02  0.04  0.01\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"Fit data:\\n%r\" % ensemble.data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  Custom Ensemble (Superlearner) with the two less accurate models in two layers "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "ensemble = SuperLearner(scorer=accuracy_score, random_state=1, verbose=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SuperLearner(array_check=None, backend=None, folds=2,\n",
       "       layers=[Layer(backend='threading', dtype=<class 'numpy.float32'>, n_jobs=-1,\n",
       "   name='layer-1', propagate_features=None, raise_on_exception=True,\n",
       "   random_state=235, shuffle=False,\n",
       "   stack=[Group(backend='threading', dtype=<class 'numpy.float32'>,\n",
       "   indexer=FoldIndex(X=None, folds=2, raise_on_exc...48BB160>)],\n",
       "   n_jobs=-1, name='group-2', raise_on_exception=True, transformers=[])],\n",
       "   verbose=1)],\n",
       "       model_selection=False, n_jobs=None, raise_on_exception=True,\n",
       "       random_state=1, sample_size=20,\n",
       "       scorer=<function accuracy_score at 0x000001A0848BB160>,\n",
       "       shuffle=False, verbose=2)"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Build the first layer\n",
    "ensemble.add([ dtree, xgb])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SuperLearner(array_check=None, backend=None, folds=2,\n",
       "       layers=[Layer(backend='threading', dtype=<class 'numpy.float32'>, n_jobs=-1,\n",
       "   name='layer-1', propagate_features=None, raise_on_exception=True,\n",
       "   random_state=235, shuffle=False,\n",
       "   stack=[Group(backend='threading', dtype=<class 'numpy.float32'>,\n",
       "   indexer=FoldIndex(X=None, folds=2, raise_on_exc...48BB160>)],\n",
       "   n_jobs=-1, name='group-3', raise_on_exception=True, transformers=[])],\n",
       "   verbose=1)],\n",
       "       model_selection=False, n_jobs=None, raise_on_exception=True,\n",
       "       random_state=1, sample_size=20,\n",
       "       scorer=<function accuracy_score at 0x000001A0848BB160>,\n",
       "       shuffle=False, verbose=2)"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Attach the final meta estimator\n",
    "ensemble.add_meta(LogisticRegression())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Fitting 2 layers\n",
      "Processing layer-1             done | 00:00:00\n",
      "Processing layer-2             done | 00:00:00\n",
      "Fit complete                        | 00:00:00\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "SuperLearner(array_check=None, backend=None, folds=2,\n",
       "       layers=[Layer(backend='threading', dtype=<class 'numpy.float32'>, n_jobs=-1,\n",
       "   name='layer-1', propagate_features=None, raise_on_exception=True,\n",
       "   random_state=235, shuffle=False,\n",
       "   stack=[Group(backend='threading', dtype=<class 'numpy.float32'>,\n",
       "   indexer=FoldIndex(X=None, folds=2, raise_on_exc...48BB160>)],\n",
       "   n_jobs=-1, name='group-3', raise_on_exception=True, transformers=[])],\n",
       "   verbose=1)],\n",
       "       model_selection=False, n_jobs=None, raise_on_exception=True,\n",
       "       random_state=1, sample_size=20,\n",
       "       scorer=<function accuracy_score at 0x000001A0848BB160>,\n",
       "       shuffle=False, verbose=2)"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Fit ensemble\n",
    "ensemble.fit(X_train, Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Predicting 2 layers\n",
      "Processing layer-1             done | 00:00:00\n",
      "Processing layer-2             done | 00:00:00\n",
      "Predict complete                    | 00:00:00\n",
      "Accuracy - Train :  1.0\n",
      "\n",
      "Predicting 2 layers\n",
      "Processing layer-1             done | 00:00:00\n",
      "Processing layer-2             done | 00:00:00\n",
      "Predict complete                    | 00:00:00\n",
      "Accuracy - Test :  0.7888888888888889\n"
     ]
    }
   ],
   "source": [
    "#pred_vals = ensemble.predict(X_test)\n",
    "print (\"Accuracy - Train : \", sklearn.metrics.accuracy_score(ensemble.predict(X_train), Y_train))\n",
    "print (\"Accuracy - Test : \", sklearn.metrics.accuracy_score(ensemble.predict(X_test), Y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit data:\n",
      "                                   score-m  score-s  ft-m  ft-s  pt-m  pt-s\n",
      "layer-1  decisiontreeclassifier       0.72     0.01  0.01  0.00  0.01  0.00\n",
      "layer-1  xgbclassifier                0.73     0.08  0.15  0.00  0.00  0.00\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"Fit data:\\n%r\" % ensemble.data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
